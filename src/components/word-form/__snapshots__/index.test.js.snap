// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`WordForm render 1`] = `
<WordForm
  checkIsLoading={[Function]}
  onSubmit={[Function]}
  word={
    Object {
      "_id": "1",
      "partOfSpeech": Array [
        Object {
          "id": "55",
          "value": "noun",
        },
      ],
      "synonyms": Array [
        Object {
          "id": "34",
          "value": "day",
        },
      ],
    }
  }
  wordItem={null}
>
  <form
    onSubmit={[Function]}
  >
    <WithTheme(Fade)>
      <Fade
        theme={
          Object {
            "breakpoints": Object {
              "between": [Function],
              "down": [Function],
              "keys": Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ],
              "only": [Function],
              "up": [Function],
              "values": Object {
                "lg": 1280,
                "md": 960,
                "sm": 600,
                "xl": 1920,
                "xs": 0,
              },
              "width": [Function],
            },
            "direction": "ltr",
            "mixins": Object {
              "gutters": [Function],
              "toolbar": Object {
                "@media (min-width:0px) and (orientation: landscape)": Object {
                  "minHeight": 48,
                },
                "@media (min-width:600px)": Object {
                  "minHeight": 64,
                },
                "minHeight": 56,
              },
            },
            "overrides": Object {},
            "palette": Object {
              "action": Object {
                "active": "rgba(0, 0, 0, 0.54)",
                "disabled": "rgba(0, 0, 0, 0.26)",
                "disabledBackground": "rgba(0, 0, 0, 0.12)",
                "hover": "rgba(0, 0, 0, 0.08)",
                "hoverOpacity": 0.08,
                "selected": "rgba(0, 0, 0, 0.14)",
              },
              "augmentColor": [Function],
              "background": Object {
                "default": "#fafafa",
                "paper": "#fff",
              },
              "common": Object {
                "black": "#000",
                "white": "#fff",
              },
              "contrastThreshold": 3,
              "divider": "rgba(0, 0, 0, 0.12)",
              "error": Object {
                "contrastText": "#fff",
                "dark": "#d32f2f",
                "light": "#e57373",
                "main": "#f44336",
              },
              "getContrastText": [Function],
              "grey": Object {
                "100": "#f5f5f5",
                "200": "#eeeeee",
                "300": "#e0e0e0",
                "400": "#bdbdbd",
                "50": "#fafafa",
                "500": "#9e9e9e",
                "600": "#757575",
                "700": "#616161",
                "800": "#424242",
                "900": "#212121",
                "A100": "#d5d5d5",
                "A200": "#aaaaaa",
                "A400": "#303030",
                "A700": "#616161",
              },
              "primary": Object {
                "contrastText": "#fff",
                "dark": "#303f9f",
                "light": "#7986cb",
                "main": "#3f51b5",
              },
              "secondary": Object {
                "contrastText": "#fff",
                "dark": "#c51162",
                "light": "#ff4081",
                "main": "#f50057",
              },
              "text": Object {
                "disabled": "rgba(0, 0, 0, 0.38)",
                "hint": "rgba(0, 0, 0, 0.38)",
                "primary": "rgba(0, 0, 0, 0.87)",
                "secondary": "rgba(0, 0, 0, 0.54)",
              },
              "tonalOffset": 0.2,
              "type": "light",
            },
            "props": Object {},
            "shadows": Array [
              "none",
              "0px 1px 3px 0px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 2px 1px -1px rgba(0,0,0,0.12)",
              "0px 1px 5px 0px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 3px 1px -2px rgba(0,0,0,0.12)",
              "0px 1px 8px 0px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 3px 3px -2px rgba(0,0,0,0.12)",
              "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
              "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
              "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
              "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
              "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
              "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
              "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
              "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
              "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
              "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
              "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
              "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
              "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
              "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
              "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
            ],
            "shape": Object {
              "borderRadius": 4,
            },
            "spacing": Object {
              "unit": 8,
            },
            "transitions": Object {
              "create": [Function],
              "duration": Object {
                "complex": 375,
                "enteringScreen": 225,
                "leavingScreen": 195,
                "short": 250,
                "shorter": 200,
                "shortest": 150,
                "standard": 300,
              },
              "easing": Object {
                "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
              },
              "getAutoHeightDuration": [Function],
            },
            "typography": Object {
              "body1": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 400,
                "lineHeight": "1.46429em",
              },
              "body1Next": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1rem",
                "fontWeight": 400,
                "letterSpacing": "0.00938em",
                "lineHeight": 1.5,
              },
              "body2": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 500,
                "lineHeight": "1.71429em",
              },
              "body2Next": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 400,
                "letterSpacing": "0.01071em",
                "lineHeight": 1.5,
              },
              "button": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 500,
                "textTransform": "uppercase",
              },
              "buttonNext": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 500,
                "letterSpacing": "0.02857em",
                "lineHeight": 1.75,
                "textTransform": "uppercase",
              },
              "caption": Object {
                "color": "rgba(0, 0, 0, 0.54)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.75rem",
                "fontWeight": 400,
                "lineHeight": "1.375em",
              },
              "captionNext": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.75rem",
                "fontWeight": 400,
                "letterSpacing": "0.03333em",
                "lineHeight": 1.66,
              },
              "display1": Object {
                "color": "rgba(0, 0, 0, 0.54)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "2.125rem",
                "fontWeight": 400,
                "lineHeight": "1.20588em",
              },
              "display2": Object {
                "color": "rgba(0, 0, 0, 0.54)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "2.8125rem",
                "fontWeight": 400,
                "lineHeight": "1.13333em",
                "marginLeft": "-.02em",
              },
              "display3": Object {
                "color": "rgba(0, 0, 0, 0.54)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "3.5rem",
                "fontWeight": 400,
                "letterSpacing": "-.02em",
                "lineHeight": "1.30357em",
                "marginLeft": "-.02em",
              },
              "display4": Object {
                "color": "rgba(0, 0, 0, 0.54)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "7rem",
                "fontWeight": 300,
                "letterSpacing": "-.04em",
                "lineHeight": "1.14286em",
                "marginLeft": "-.04em",
              },
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": 14,
              "fontWeightLight": 300,
              "fontWeightMedium": 500,
              "fontWeightRegular": 400,
              "h1": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "6rem",
                "fontWeight": 300,
                "letterSpacing": "-0.01562em",
                "lineHeight": 1,
              },
              "h2": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "3.75rem",
                "fontWeight": 300,
                "letterSpacing": "-0.00833em",
                "lineHeight": 1,
              },
              "h3": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "3rem",
                "fontWeight": 400,
                "letterSpacing": "0em",
                "lineHeight": 1.04,
              },
              "h4": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "2.125rem",
                "fontWeight": 400,
                "letterSpacing": "0.00735em",
                "lineHeight": 1.17,
              },
              "h5": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1.5rem",
                "fontWeight": 400,
                "letterSpacing": "0em",
                "lineHeight": 1.33,
              },
              "h6": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1.25rem",
                "fontWeight": 500,
                "letterSpacing": "0.0075em",
                "lineHeight": 1.6,
              },
              "headline": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1.5rem",
                "fontWeight": 400,
                "lineHeight": "1.35417em",
              },
              "overline": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.75rem",
                "fontWeight": 400,
                "letterSpacing": "0.08333em",
                "lineHeight": 2.66,
                "textTransform": "uppercase",
              },
              "pxToRem": [Function],
              "round": [Function],
              "subheading": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1rem",
                "fontWeight": 400,
                "lineHeight": "1.5em",
              },
              "subtitle1": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1rem",
                "fontWeight": 400,
                "letterSpacing": "0.00938em",
                "lineHeight": 1.75,
              },
              "subtitle2": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 500,
                "letterSpacing": "0.00714em",
                "lineHeight": 1.57,
              },
              "title": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1.3125rem",
                "fontWeight": 500,
                "lineHeight": "1.16667em",
              },
              "useNextVariants": false,
            },
            "zIndex": Object {
              "appBar": 1100,
              "drawer": 1200,
              "mobileStepper": 1000,
              "modal": 1300,
              "snackbar": 1400,
              "tooltip": 1500,
            },
          }
        }
        timeout={
          Object {
            "enter": 225,
            "exit": 195,
          }
        }
      >
        <Transition
          appear={true}
          enter={true}
          exit={true}
          in={false}
          mountOnEnter={false}
          onEnter={[Function]}
          onEntered={[Function]}
          onEntering={[Function]}
          onExit={[Function]}
          onExited={[Function]}
          onExiting={[Function]}
          timeout={
            Object {
              "enter": 225,
              "exit": 195,
            }
          }
          unmountOnExit={false}
        >
          <WithStyles(LinearProgress)
            color="secondary"
            style={
              Object {
                "opacity": 0,
              }
            }
          >
            <LinearProgress
              classes={
                Object {
                  "bar": "MuiLinearProgress-bar-11",
                  "bar1Buffer": "MuiLinearProgress-bar1Buffer-16",
                  "bar1Determinate": "MuiLinearProgress-bar1Determinate-15",
                  "bar1Indeterminate": "MuiLinearProgress-bar1Indeterminate-14",
                  "bar2Buffer": "MuiLinearProgress-bar2Buffer-18",
                  "bar2Indeterminate": "MuiLinearProgress-bar2Indeterminate-17",
                  "barColorPrimary": "MuiLinearProgress-barColorPrimary-12",
                  "barColorSecondary": "MuiLinearProgress-barColorSecondary-13",
                  "buffer": "MuiLinearProgress-buffer-6",
                  "colorPrimary": "MuiLinearProgress-colorPrimary-2",
                  "colorSecondary": "MuiLinearProgress-colorSecondary-3",
                  "dashed": "MuiLinearProgress-dashed-8",
                  "dashedColorPrimary": "MuiLinearProgress-dashedColorPrimary-9",
                  "dashedColorSecondary": "MuiLinearProgress-dashedColorSecondary-10",
                  "determinate": "MuiLinearProgress-determinate-4",
                  "indeterminate": "MuiLinearProgress-indeterminate-5",
                  "query": "MuiLinearProgress-query-7",
                  "root": "MuiLinearProgress-root-1",
                }
              }
              color="secondary"
              style={
                Object {
                  "opacity": 0,
                }
              }
              variant="indeterminate"
            >
              <div
                className="MuiLinearProgress-root-1 MuiLinearProgress-colorSecondary-3 MuiLinearProgress-indeterminate-5"
                role="progressbar"
                style={
                  Object {
                    "opacity": 0,
                  }
                }
              >
                <div
                  className="MuiLinearProgress-bar-11 MuiLinearProgress-barColorSecondary-13 MuiLinearProgress-bar1Indeterminate-14"
                  style={Object {}}
                />
                <div
                  className="MuiLinearProgress-bar-11 MuiLinearProgress-barColorSecondary-13 MuiLinearProgress-bar2Indeterminate-17"
                  style={Object {}}
                />
              </div>
            </LinearProgress>
          </WithStyles(LinearProgress)>
        </Transition>
      </Fade>
    </WithTheme(Fade)>
    <WithTheme(InputsBlock)
      title="Main information"
    >
      <InputsBlock
        classes={Object {}}
        control={false}
        onAddItem={[Function]}
        title="Main information"
      >
        <div>
          <div>
            <h3>
              Main information
            </h3>
            <div />
          </div>
          <div>
            <TextField
              label="Word"
              onChange={[Function]}
              required={false}
              select={false}
              value=""
              variant="standard"
            >
              <WithStyles(FormControl)
                required={false}
                variant="standard"
              >
                <FormControl
                  classes={
                    Object {
                      "fullWidth": "MuiFormControl-fullWidth-22",
                      "marginDense": "MuiFormControl-marginDense-21",
                      "marginNormal": "MuiFormControl-marginNormal-20",
                      "root": "MuiFormControl-root-19",
                    }
                  }
                  component="div"
                  disabled={false}
                  error={false}
                  fullWidth={false}
                  margin="none"
                  required={false}
                  variant="standard"
                >
                  <div
                    className="MuiFormControl-root-19"
                  >
                    <WithStyles(WithFormControlContext(InputLabel))>
                      <WithFormControlContext(InputLabel)
                        classes={
                          Object {
                            "animated": "MuiInputLabel-animated-31",
                            "disabled": "MuiInputLabel-disabled-25",
                            "error": "MuiInputLabel-error-26",
                            "filled": "MuiInputLabel-filled-32",
                            "focused": "MuiInputLabel-focused-24",
                            "formControl": "MuiInputLabel-formControl-28",
                            "marginDense": "MuiInputLabel-marginDense-29",
                            "outlined": "MuiInputLabel-outlined-33",
                            "required": "MuiInputLabel-required-27",
                            "root": "MuiInputLabel-root-23",
                            "shrink": "MuiInputLabel-shrink-30",
                          }
                        }
                      >
                        <InputLabel
                          classes={
                            Object {
                              "animated": "MuiInputLabel-animated-31",
                              "disabled": "MuiInputLabel-disabled-25",
                              "error": "MuiInputLabel-error-26",
                              "filled": "MuiInputLabel-filled-32",
                              "focused": "MuiInputLabel-focused-24",
                              "formControl": "MuiInputLabel-formControl-28",
                              "marginDense": "MuiInputLabel-marginDense-29",
                              "outlined": "MuiInputLabel-outlined-33",
                              "required": "MuiInputLabel-required-27",
                              "root": "MuiInputLabel-root-23",
                              "shrink": "MuiInputLabel-shrink-30",
                            }
                          }
                          disableAnimation={false}
                          muiFormControl={
                            Object {
                              "adornedStart": false,
                              "disabled": false,
                              "error": false,
                              "filled": false,
                              "focused": false,
                              "margin": "none",
                              "onBlur": [Function],
                              "onEmpty": [Function],
                              "onFilled": [Function],
                              "onFocus": [Function],
                              "required": false,
                              "variant": "standard",
                            }
                          }
                        >
                          <WithStyles(WithFormControlContext(FormLabel))
                            className="MuiInputLabel-root-23 MuiInputLabel-formControl-28 MuiInputLabel-animated-31"
                            classes={
                              Object {
                                "disabled": "MuiInputLabel-disabled-25",
                                "error": "MuiInputLabel-error-26",
                                "focused": "MuiInputLabel-focused-24",
                                "required": "MuiInputLabel-required-27",
                              }
                            }
                            data-shrink={false}
                          >
                            <WithFormControlContext(FormLabel)
                              className="MuiInputLabel-root-23 MuiInputLabel-formControl-28 MuiInputLabel-animated-31"
                              classes={
                                Object {
                                  "asterisk": "MuiFormLabel-asterisk-40",
                                  "disabled": "MuiFormLabel-disabled-36 MuiInputLabel-disabled-25",
                                  "error": "MuiFormLabel-error-37 MuiInputLabel-error-26",
                                  "filled": "MuiFormLabel-filled-38",
                                  "focused": "MuiFormLabel-focused-35 MuiInputLabel-focused-24",
                                  "required": "MuiFormLabel-required-39 MuiInputLabel-required-27",
                                  "root": "MuiFormLabel-root-34",
                                }
                              }
                              data-shrink={false}
                            >
                              <FormLabel
                                className="MuiInputLabel-root-23 MuiInputLabel-formControl-28 MuiInputLabel-animated-31"
                                classes={
                                  Object {
                                    "asterisk": "MuiFormLabel-asterisk-40",
                                    "disabled": "MuiFormLabel-disabled-36 MuiInputLabel-disabled-25",
                                    "error": "MuiFormLabel-error-37 MuiInputLabel-error-26",
                                    "filled": "MuiFormLabel-filled-38",
                                    "focused": "MuiFormLabel-focused-35 MuiInputLabel-focused-24",
                                    "required": "MuiFormLabel-required-39 MuiInputLabel-required-27",
                                    "root": "MuiFormLabel-root-34",
                                  }
                                }
                                component="label"
                                data-shrink={false}
                                muiFormControl={
                                  Object {
                                    "adornedStart": false,
                                    "disabled": false,
                                    "error": false,
                                    "filled": false,
                                    "focused": false,
                                    "margin": "none",
                                    "onBlur": [Function],
                                    "onEmpty": [Function],
                                    "onFilled": [Function],
                                    "onFocus": [Function],
                                    "required": false,
                                    "variant": "standard",
                                  }
                                }
                              >
                                <label
                                  className="MuiFormLabel-root-34 MuiInputLabel-root-23 MuiInputLabel-formControl-28 MuiInputLabel-animated-31"
                                  data-shrink={false}
                                >
                                  Word
                                </label>
                              </FormLabel>
                            </WithFormControlContext(FormLabel)>
                          </WithStyles(WithFormControlContext(FormLabel))>
                        </InputLabel>
                      </WithFormControlContext(InputLabel)>
                    </WithStyles(WithFormControlContext(InputLabel))>
                    <WithStyles(Input)
                      onChange={[Function]}
                      value=""
                    >
                      <Input
                        classes={
                          Object {
                            "disabled": "MuiInput-disabled-44",
                            "error": "MuiInput-error-46",
                            "focused": "MuiInput-focused-43",
                            "formControl": "MuiInput-formControl-42",
                            "fullWidth": "MuiInput-fullWidth-48",
                            "input": "MuiInput-input-49",
                            "inputMarginDense": "MuiInput-inputMarginDense-50",
                            "inputMultiline": "MuiInput-inputMultiline-51",
                            "inputType": "MuiInput-inputType-52",
                            "inputTypeSearch": "MuiInput-inputTypeSearch-53",
                            "multiline": "MuiInput-multiline-47",
                            "root": "MuiInput-root-41",
                            "underline": "MuiInput-underline-45",
                          }
                        }
                        onChange={[Function]}
                        value=""
                      >
                        <WithStyles(WithFormControlContext(InputBase))
                          classes={
                            Object {
                              "disabled": "MuiInput-disabled-44",
                              "error": "MuiInput-error-46",
                              "focused": "MuiInput-focused-43",
                              "formControl": "MuiInput-formControl-42",
                              "fullWidth": "MuiInput-fullWidth-48",
                              "input": "MuiInput-input-49",
                              "inputMarginDense": "MuiInput-inputMarginDense-50",
                              "inputMultiline": "MuiInput-inputMultiline-51",
                              "inputType": "MuiInput-inputType-52",
                              "inputTypeSearch": "MuiInput-inputTypeSearch-53",
                              "multiline": "MuiInput-multiline-47",
                              "root": "MuiInput-root-41 MuiInput-underline-45",
                              "underline": null,
                            }
                          }
                          fullWidth={false}
                          inputComponent="input"
                          multiline={false}
                          onChange={[Function]}
                          type="text"
                          value=""
                        >
                          <WithFormControlContext(InputBase)
                            classes={
                              Object {
                                "adornedEnd": "MuiInputBase-adornedEnd-59",
                                "adornedStart": "MuiInputBase-adornedStart-58",
                                "disabled": "MuiInputBase-disabled-57 MuiInput-disabled-44",
                                "error": "MuiInputBase-error-60 MuiInput-error-46",
                                "focused": "MuiInputBase-focused-56 MuiInput-focused-43",
                                "formControl": "MuiInputBase-formControl-55 MuiInput-formControl-42",
                                "fullWidth": "MuiInputBase-fullWidth-63 MuiInput-fullWidth-48",
                                "input": "MuiInputBase-input-64 MuiInput-input-49",
                                "inputAdornedEnd": "MuiInputBase-inputAdornedEnd-70",
                                "inputAdornedStart": "MuiInputBase-inputAdornedStart-69",
                                "inputMarginDense": "MuiInputBase-inputMarginDense-65 MuiInput-inputMarginDense-50",
                                "inputMultiline": "MuiInputBase-inputMultiline-66 MuiInput-inputMultiline-51",
                                "inputType": "MuiInputBase-inputType-67 MuiInput-inputType-52",
                                "inputTypeSearch": "MuiInputBase-inputTypeSearch-68 MuiInput-inputTypeSearch-53",
                                "marginDense": "MuiInputBase-marginDense-61",
                                "multiline": "MuiInputBase-multiline-62 MuiInput-multiline-47",
                                "root": "MuiInputBase-root-54 MuiInput-root-41 MuiInput-underline-45",
                              }
                            }
                            fullWidth={false}
                            inputComponent="input"
                            multiline={false}
                            onChange={[Function]}
                            type="text"
                            value=""
                          >
                            <InputBase
                              classes={
                                Object {
                                  "adornedEnd": "MuiInputBase-adornedEnd-59",
                                  "adornedStart": "MuiInputBase-adornedStart-58",
                                  "disabled": "MuiInputBase-disabled-57 MuiInput-disabled-44",
                                  "error": "MuiInputBase-error-60 MuiInput-error-46",
                                  "focused": "MuiInputBase-focused-56 MuiInput-focused-43",
                                  "formControl": "MuiInputBase-formControl-55 MuiInput-formControl-42",
                                  "fullWidth": "MuiInputBase-fullWidth-63 MuiInput-fullWidth-48",
                                  "input": "MuiInputBase-input-64 MuiInput-input-49",
                                  "inputAdornedEnd": "MuiInputBase-inputAdornedEnd-70",
                                  "inputAdornedStart": "MuiInputBase-inputAdornedStart-69",
                                  "inputMarginDense": "MuiInputBase-inputMarginDense-65 MuiInput-inputMarginDense-50",
                                  "inputMultiline": "MuiInputBase-inputMultiline-66 MuiInput-inputMultiline-51",
                                  "inputType": "MuiInputBase-inputType-67 MuiInput-inputType-52",
                                  "inputTypeSearch": "MuiInputBase-inputTypeSearch-68 MuiInput-inputTypeSearch-53",
                                  "marginDense": "MuiInputBase-marginDense-61",
                                  "multiline": "MuiInputBase-multiline-62 MuiInput-multiline-47",
                                  "root": "MuiInputBase-root-54 MuiInput-root-41 MuiInput-underline-45",
                                }
                              }
                              fullWidth={false}
                              inputComponent="input"
                              muiFormControl={
                                Object {
                                  "adornedStart": false,
                                  "disabled": false,
                                  "error": false,
                                  "filled": false,
                                  "focused": false,
                                  "margin": "none",
                                  "onBlur": [Function],
                                  "onEmpty": [Function],
                                  "onFilled": [Function],
                                  "onFocus": [Function],
                                  "required": false,
                                  "variant": "standard",
                                }
                              }
                              multiline={false}
                              onChange={[Function]}
                              type="text"
                              value=""
                            >
                              <div
                                className="MuiInputBase-root-54 MuiInput-root-41 MuiInput-underline-45 MuiInputBase-formControl-55 MuiInput-formControl-42"
                                onClick={[Function]}
                              >
                                <input
                                  aria-invalid={false}
                                  className="MuiInputBase-input-64 MuiInput-input-49"
                                  disabled={false}
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  onFocus={[Function]}
                                  required={false}
                                  type="text"
                                  value=""
                                />
                              </div>
                            </InputBase>
                          </WithFormControlContext(InputBase)>
                        </WithStyles(WithFormControlContext(InputBase))>
                      </Input>
                    </WithStyles(Input)>
                  </div>
                </FormControl>
              </WithStyles(FormControl)>
            </TextField>
            <TextField
              label="Transcription"
              onChange={[Function]}
              required={false}
              select={false}
              value=""
              variant="standard"
            >
              <WithStyles(FormControl)
                required={false}
                variant="standard"
              >
                <FormControl
                  classes={
                    Object {
                      "fullWidth": "MuiFormControl-fullWidth-22",
                      "marginDense": "MuiFormControl-marginDense-21",
                      "marginNormal": "MuiFormControl-marginNormal-20",
                      "root": "MuiFormControl-root-19",
                    }
                  }
                  component="div"
                  disabled={false}
                  error={false}
                  fullWidth={false}
                  margin="none"
                  required={false}
                  variant="standard"
                >
                  <div
                    className="MuiFormControl-root-19"
                  >
                    <WithStyles(WithFormControlContext(InputLabel))>
                      <WithFormControlContext(InputLabel)
                        classes={
                          Object {
                            "animated": "MuiInputLabel-animated-31",
                            "disabled": "MuiInputLabel-disabled-25",
                            "error": "MuiInputLabel-error-26",
                            "filled": "MuiInputLabel-filled-32",
                            "focused": "MuiInputLabel-focused-24",
                            "formControl": "MuiInputLabel-formControl-28",
                            "marginDense": "MuiInputLabel-marginDense-29",
                            "outlined": "MuiInputLabel-outlined-33",
                            "required": "MuiInputLabel-required-27",
                            "root": "MuiInputLabel-root-23",
                            "shrink": "MuiInputLabel-shrink-30",
                          }
                        }
                      >
                        <InputLabel
                          classes={
                            Object {
                              "animated": "MuiInputLabel-animated-31",
                              "disabled": "MuiInputLabel-disabled-25",
                              "error": "MuiInputLabel-error-26",
                              "filled": "MuiInputLabel-filled-32",
                              "focused": "MuiInputLabel-focused-24",
                              "formControl": "MuiInputLabel-formControl-28",
                              "marginDense": "MuiInputLabel-marginDense-29",
                              "outlined": "MuiInputLabel-outlined-33",
                              "required": "MuiInputLabel-required-27",
                              "root": "MuiInputLabel-root-23",
                              "shrink": "MuiInputLabel-shrink-30",
                            }
                          }
                          disableAnimation={false}
                          muiFormControl={
                            Object {
                              "adornedStart": false,
                              "disabled": false,
                              "error": false,
                              "filled": false,
                              "focused": false,
                              "margin": "none",
                              "onBlur": [Function],
                              "onEmpty": [Function],
                              "onFilled": [Function],
                              "onFocus": [Function],
                              "required": false,
                              "variant": "standard",
                            }
                          }
                        >
                          <WithStyles(WithFormControlContext(FormLabel))
                            className="MuiInputLabel-root-23 MuiInputLabel-formControl-28 MuiInputLabel-animated-31"
                            classes={
                              Object {
                                "disabled": "MuiInputLabel-disabled-25",
                                "error": "MuiInputLabel-error-26",
                                "focused": "MuiInputLabel-focused-24",
                                "required": "MuiInputLabel-required-27",
                              }
                            }
                            data-shrink={false}
                          >
                            <WithFormControlContext(FormLabel)
                              className="MuiInputLabel-root-23 MuiInputLabel-formControl-28 MuiInputLabel-animated-31"
                              classes={
                                Object {
                                  "asterisk": "MuiFormLabel-asterisk-40",
                                  "disabled": "MuiFormLabel-disabled-36 MuiInputLabel-disabled-25",
                                  "error": "MuiFormLabel-error-37 MuiInputLabel-error-26",
                                  "filled": "MuiFormLabel-filled-38",
                                  "focused": "MuiFormLabel-focused-35 MuiInputLabel-focused-24",
                                  "required": "MuiFormLabel-required-39 MuiInputLabel-required-27",
                                  "root": "MuiFormLabel-root-34",
                                }
                              }
                              data-shrink={false}
                            >
                              <FormLabel
                                className="MuiInputLabel-root-23 MuiInputLabel-formControl-28 MuiInputLabel-animated-31"
                                classes={
                                  Object {
                                    "asterisk": "MuiFormLabel-asterisk-40",
                                    "disabled": "MuiFormLabel-disabled-36 MuiInputLabel-disabled-25",
                                    "error": "MuiFormLabel-error-37 MuiInputLabel-error-26",
                                    "filled": "MuiFormLabel-filled-38",
                                    "focused": "MuiFormLabel-focused-35 MuiInputLabel-focused-24",
                                    "required": "MuiFormLabel-required-39 MuiInputLabel-required-27",
                                    "root": "MuiFormLabel-root-34",
                                  }
                                }
                                component="label"
                                data-shrink={false}
                                muiFormControl={
                                  Object {
                                    "adornedStart": false,
                                    "disabled": false,
                                    "error": false,
                                    "filled": false,
                                    "focused": false,
                                    "margin": "none",
                                    "onBlur": [Function],
                                    "onEmpty": [Function],
                                    "onFilled": [Function],
                                    "onFocus": [Function],
                                    "required": false,
                                    "variant": "standard",
                                  }
                                }
                              >
                                <label
                                  className="MuiFormLabel-root-34 MuiInputLabel-root-23 MuiInputLabel-formControl-28 MuiInputLabel-animated-31"
                                  data-shrink={false}
                                >
                                  Transcription
                                </label>
                              </FormLabel>
                            </WithFormControlContext(FormLabel)>
                          </WithStyles(WithFormControlContext(FormLabel))>
                        </InputLabel>
                      </WithFormControlContext(InputLabel)>
                    </WithStyles(WithFormControlContext(InputLabel))>
                    <WithStyles(Input)
                      onChange={[Function]}
                      value=""
                    >
                      <Input
                        classes={
                          Object {
                            "disabled": "MuiInput-disabled-44",
                            "error": "MuiInput-error-46",
                            "focused": "MuiInput-focused-43",
                            "formControl": "MuiInput-formControl-42",
                            "fullWidth": "MuiInput-fullWidth-48",
                            "input": "MuiInput-input-49",
                            "inputMarginDense": "MuiInput-inputMarginDense-50",
                            "inputMultiline": "MuiInput-inputMultiline-51",
                            "inputType": "MuiInput-inputType-52",
                            "inputTypeSearch": "MuiInput-inputTypeSearch-53",
                            "multiline": "MuiInput-multiline-47",
                            "root": "MuiInput-root-41",
                            "underline": "MuiInput-underline-45",
                          }
                        }
                        onChange={[Function]}
                        value=""
                      >
                        <WithStyles(WithFormControlContext(InputBase))
                          classes={
                            Object {
                              "disabled": "MuiInput-disabled-44",
                              "error": "MuiInput-error-46",
                              "focused": "MuiInput-focused-43",
                              "formControl": "MuiInput-formControl-42",
                              "fullWidth": "MuiInput-fullWidth-48",
                              "input": "MuiInput-input-49",
                              "inputMarginDense": "MuiInput-inputMarginDense-50",
                              "inputMultiline": "MuiInput-inputMultiline-51",
                              "inputType": "MuiInput-inputType-52",
                              "inputTypeSearch": "MuiInput-inputTypeSearch-53",
                              "multiline": "MuiInput-multiline-47",
                              "root": "MuiInput-root-41 MuiInput-underline-45",
                              "underline": null,
                            }
                          }
                          fullWidth={false}
                          inputComponent="input"
                          multiline={false}
                          onChange={[Function]}
                          type="text"
                          value=""
                        >
                          <WithFormControlContext(InputBase)
                            classes={
                              Object {
                                "adornedEnd": "MuiInputBase-adornedEnd-59",
                                "adornedStart": "MuiInputBase-adornedStart-58",
                                "disabled": "MuiInputBase-disabled-57 MuiInput-disabled-44",
                                "error": "MuiInputBase-error-60 MuiInput-error-46",
                                "focused": "MuiInputBase-focused-56 MuiInput-focused-43",
                                "formControl": "MuiInputBase-formControl-55 MuiInput-formControl-42",
                                "fullWidth": "MuiInputBase-fullWidth-63 MuiInput-fullWidth-48",
                                "input": "MuiInputBase-input-64 MuiInput-input-49",
                                "inputAdornedEnd": "MuiInputBase-inputAdornedEnd-70",
                                "inputAdornedStart": "MuiInputBase-inputAdornedStart-69",
                                "inputMarginDense": "MuiInputBase-inputMarginDense-65 MuiInput-inputMarginDense-50",
                                "inputMultiline": "MuiInputBase-inputMultiline-66 MuiInput-inputMultiline-51",
                                "inputType": "MuiInputBase-inputType-67 MuiInput-inputType-52",
                                "inputTypeSearch": "MuiInputBase-inputTypeSearch-68 MuiInput-inputTypeSearch-53",
                                "marginDense": "MuiInputBase-marginDense-61",
                                "multiline": "MuiInputBase-multiline-62 MuiInput-multiline-47",
                                "root": "MuiInputBase-root-54 MuiInput-root-41 MuiInput-underline-45",
                              }
                            }
                            fullWidth={false}
                            inputComponent="input"
                            multiline={false}
                            onChange={[Function]}
                            type="text"
                            value=""
                          >
                            <InputBase
                              classes={
                                Object {
                                  "adornedEnd": "MuiInputBase-adornedEnd-59",
                                  "adornedStart": "MuiInputBase-adornedStart-58",
                                  "disabled": "MuiInputBase-disabled-57 MuiInput-disabled-44",
                                  "error": "MuiInputBase-error-60 MuiInput-error-46",
                                  "focused": "MuiInputBase-focused-56 MuiInput-focused-43",
                                  "formControl": "MuiInputBase-formControl-55 MuiInput-formControl-42",
                                  "fullWidth": "MuiInputBase-fullWidth-63 MuiInput-fullWidth-48",
                                  "input": "MuiInputBase-input-64 MuiInput-input-49",
                                  "inputAdornedEnd": "MuiInputBase-inputAdornedEnd-70",
                                  "inputAdornedStart": "MuiInputBase-inputAdornedStart-69",
                                  "inputMarginDense": "MuiInputBase-inputMarginDense-65 MuiInput-inputMarginDense-50",
                                  "inputMultiline": "MuiInputBase-inputMultiline-66 MuiInput-inputMultiline-51",
                                  "inputType": "MuiInputBase-inputType-67 MuiInput-inputType-52",
                                  "inputTypeSearch": "MuiInputBase-inputTypeSearch-68 MuiInput-inputTypeSearch-53",
                                  "marginDense": "MuiInputBase-marginDense-61",
                                  "multiline": "MuiInputBase-multiline-62 MuiInput-multiline-47",
                                  "root": "MuiInputBase-root-54 MuiInput-root-41 MuiInput-underline-45",
                                }
                              }
                              fullWidth={false}
                              inputComponent="input"
                              muiFormControl={
                                Object {
                                  "adornedStart": false,
                                  "disabled": false,
                                  "error": false,
                                  "filled": false,
                                  "focused": false,
                                  "margin": "none",
                                  "onBlur": [Function],
                                  "onEmpty": [Function],
                                  "onFilled": [Function],
                                  "onFocus": [Function],
                                  "required": false,
                                  "variant": "standard",
                                }
                              }
                              multiline={false}
                              onChange={[Function]}
                              type="text"
                              value=""
                            >
                              <div
                                className="MuiInputBase-root-54 MuiInput-root-41 MuiInput-underline-45 MuiInputBase-formControl-55 MuiInput-formControl-42"
                                onClick={[Function]}
                              >
                                <input
                                  aria-invalid={false}
                                  className="MuiInputBase-input-64 MuiInput-input-49"
                                  disabled={false}
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  onFocus={[Function]}
                                  required={false}
                                  type="text"
                                  value=""
                                />
                              </div>
                            </InputBase>
                          </WithFormControlContext(InputBase)>
                        </WithStyles(WithFormControlContext(InputBase))>
                      </Input>
                    </WithStyles(Input)>
                  </div>
                </FormControl>
              </WithStyles(FormControl)>
            </TextField>
          </div>
        </div>
      </InputsBlock>
    </WithTheme(InputsBlock)>
    <WithTheme(InputsBlock)
      control={
        <ForwardRef
          label="Parts of speech"
          onChange={[Function]}
          options={
            Array [
              Object {
                "key": "noun",
                "title": "Noun",
              },
              Object {
                "key": "pronoun",
                "title": "Pronoun",
              },
              Object {
                "key": "verb",
                "title": "Verb",
              },
              Object {
                "key": "adjective",
                "title": "Adjective",
              },
              Object {
                "key": "adverb",
                "title": "Adverb",
              },
              Object {
                "key": "preposition",
                "title": "Preposition",
              },
              Object {
                "key": "conjunction",
                "title": "Conjunction",
              },
              Object {
                "key": "interjection",
                "title": "Interjection",
              },
              Object {
                "key": "article",
                "title": "Article",
              },
              Object {
                "key": "determiner",
                "title": "Determiner",
              },
            ]
          }
          value="noun"
        />
      }
      title="Parts of speech"
    >
      <InputsBlock
        classes={Object {}}
        control={
          <ForwardRef
            label="Parts of speech"
            onChange={[Function]}
            options={
              Array [
                Object {
                  "key": "noun",
                  "title": "Noun",
                },
                Object {
                  "key": "pronoun",
                  "title": "Pronoun",
                },
                Object {
                  "key": "verb",
                  "title": "Verb",
                },
                Object {
                  "key": "adjective",
                  "title": "Adjective",
                },
                Object {
                  "key": "adverb",
                  "title": "Adverb",
                },
                Object {
                  "key": "preposition",
                  "title": "Preposition",
                },
                Object {
                  "key": "conjunction",
                  "title": "Conjunction",
                },
                Object {
                  "key": "interjection",
                  "title": "Interjection",
                },
                Object {
                  "key": "article",
                  "title": "Article",
                },
                Object {
                  "key": "determiner",
                  "title": "Determiner",
                },
              ]
            }
            value="noun"
          />
        }
        onAddItem={[Function]}
        title="Parts of speech"
      >
        <div>
          <div>
            <h3>
              Parts of speech
            </h3>
            <div>
              <WithTheme(SelectWithOptions)
                label="Parts of speech"
                onChange={[Function]}
                options={
                  Array [
                    Object {
                      "key": "noun",
                      "title": "Noun",
                    },
                    Object {
                      "key": "pronoun",
                      "title": "Pronoun",
                    },
                    Object {
                      "key": "verb",
                      "title": "Verb",
                    },
                    Object {
                      "key": "adjective",
                      "title": "Adjective",
                    },
                    Object {
                      "key": "adverb",
                      "title": "Adverb",
                    },
                    Object {
                      "key": "preposition",
                      "title": "Preposition",
                    },
                    Object {
                      "key": "conjunction",
                      "title": "Conjunction",
                    },
                    Object {
                      "key": "interjection",
                      "title": "Interjection",
                    },
                    Object {
                      "key": "article",
                      "title": "Article",
                    },
                    Object {
                      "key": "determiner",
                      "title": "Determiner",
                    },
                  ]
                }
                value="noun"
              >
                <SelectWithOptions
                  classes={Object {}}
                  label="Parts of speech"
                  onChange={[Function]}
                  options={
                    Array [
                      Object {
                        "key": "noun",
                        "title": "Noun",
                      },
                      Object {
                        "key": "pronoun",
                        "title": "Pronoun",
                      },
                      Object {
                        "key": "verb",
                        "title": "Verb",
                      },
                      Object {
                        "key": "adjective",
                        "title": "Adjective",
                      },
                      Object {
                        "key": "adverb",
                        "title": "Adverb",
                      },
                      Object {
                        "key": "preposition",
                        "title": "Preposition",
                      },
                      Object {
                        "key": "conjunction",
                        "title": "Conjunction",
                      },
                      Object {
                        "key": "interjection",
                        "title": "Interjection",
                      },
                      Object {
                        "key": "article",
                        "title": "Article",
                      },
                      Object {
                        "key": "determiner",
                        "title": "Determiner",
                      },
                    ]
                  }
                  value="noun"
                >
                  <SelectBlock
                    label="Parts of speech"
                    onChange={[Function]}
                    value="noun"
                  >
                    <WithStyles(FormControl)
                      color="primary"
                    >
                      <FormControl
                        classes={
                          Object {
                            "fullWidth": "MuiFormControl-fullWidth-22",
                            "marginDense": "MuiFormControl-marginDense-21",
                            "marginNormal": "MuiFormControl-marginNormal-20",
                            "root": "MuiFormControl-root-19",
                          }
                        }
                        color="primary"
                        component="div"
                        disabled={false}
                        error={false}
                        fullWidth={false}
                        margin="none"
                        required={false}
                        variant="standard"
                      >
                        <div
                          className="MuiFormControl-root-19"
                          color="primary"
                        >
                          <WithStyles(WithFormControlContext(InputLabel))
                            htmlFor="Parts of speech"
                          >
                            <WithFormControlContext(InputLabel)
                              classes={
                                Object {
                                  "animated": "MuiInputLabel-animated-31",
                                  "disabled": "MuiInputLabel-disabled-25",
                                  "error": "MuiInputLabel-error-26",
                                  "filled": "MuiInputLabel-filled-32",
                                  "focused": "MuiInputLabel-focused-24",
                                  "formControl": "MuiInputLabel-formControl-28",
                                  "marginDense": "MuiInputLabel-marginDense-29",
                                  "outlined": "MuiInputLabel-outlined-33",
                                  "required": "MuiInputLabel-required-27",
                                  "root": "MuiInputLabel-root-23",
                                  "shrink": "MuiInputLabel-shrink-30",
                                }
                              }
                              htmlFor="Parts of speech"
                            >
                              <InputLabel
                                classes={
                                  Object {
                                    "animated": "MuiInputLabel-animated-31",
                                    "disabled": "MuiInputLabel-disabled-25",
                                    "error": "MuiInputLabel-error-26",
                                    "filled": "MuiInputLabel-filled-32",
                                    "focused": "MuiInputLabel-focused-24",
                                    "formControl": "MuiInputLabel-formControl-28",
                                    "marginDense": "MuiInputLabel-marginDense-29",
                                    "outlined": "MuiInputLabel-outlined-33",
                                    "required": "MuiInputLabel-required-27",
                                    "root": "MuiInputLabel-root-23",
                                    "shrink": "MuiInputLabel-shrink-30",
                                  }
                                }
                                disableAnimation={false}
                                htmlFor="Parts of speech"
                                muiFormControl={
                                  Object {
                                    "adornedStart": false,
                                    "disabled": false,
                                    "error": false,
                                    "filled": true,
                                    "focused": false,
                                    "margin": "none",
                                    "onBlur": [Function],
                                    "onEmpty": [Function],
                                    "onFilled": [Function],
                                    "onFocus": [Function],
                                    "required": false,
                                    "variant": "standard",
                                  }
                                }
                              >
                                <WithStyles(WithFormControlContext(FormLabel))
                                  className="MuiInputLabel-root-23 MuiInputLabel-formControl-28 MuiInputLabel-animated-31 MuiInputLabel-shrink-30"
                                  classes={
                                    Object {
                                      "disabled": "MuiInputLabel-disabled-25",
                                      "error": "MuiInputLabel-error-26",
                                      "focused": "MuiInputLabel-focused-24",
                                      "required": "MuiInputLabel-required-27",
                                    }
                                  }
                                  data-shrink={true}
                                  htmlFor="Parts of speech"
                                >
                                  <WithFormControlContext(FormLabel)
                                    className="MuiInputLabel-root-23 MuiInputLabel-formControl-28 MuiInputLabel-animated-31 MuiInputLabel-shrink-30"
                                    classes={
                                      Object {
                                        "asterisk": "MuiFormLabel-asterisk-40",
                                        "disabled": "MuiFormLabel-disabled-36 MuiInputLabel-disabled-25",
                                        "error": "MuiFormLabel-error-37 MuiInputLabel-error-26",
                                        "filled": "MuiFormLabel-filled-38",
                                        "focused": "MuiFormLabel-focused-35 MuiInputLabel-focused-24",
                                        "required": "MuiFormLabel-required-39 MuiInputLabel-required-27",
                                        "root": "MuiFormLabel-root-34",
                                      }
                                    }
                                    data-shrink={true}
                                    htmlFor="Parts of speech"
                                  >
                                    <FormLabel
                                      className="MuiInputLabel-root-23 MuiInputLabel-formControl-28 MuiInputLabel-animated-31 MuiInputLabel-shrink-30"
                                      classes={
                                        Object {
                                          "asterisk": "MuiFormLabel-asterisk-40",
                                          "disabled": "MuiFormLabel-disabled-36 MuiInputLabel-disabled-25",
                                          "error": "MuiFormLabel-error-37 MuiInputLabel-error-26",
                                          "filled": "MuiFormLabel-filled-38",
                                          "focused": "MuiFormLabel-focused-35 MuiInputLabel-focused-24",
                                          "required": "MuiFormLabel-required-39 MuiInputLabel-required-27",
                                          "root": "MuiFormLabel-root-34",
                                        }
                                      }
                                      component="label"
                                      data-shrink={true}
                                      htmlFor="Parts of speech"
                                      muiFormControl={
                                        Object {
                                          "adornedStart": false,
                                          "disabled": false,
                                          "error": false,
                                          "filled": true,
                                          "focused": false,
                                          "margin": "none",
                                          "onBlur": [Function],
                                          "onEmpty": [Function],
                                          "onFilled": [Function],
                                          "onFocus": [Function],
                                          "required": false,
                                          "variant": "standard",
                                        }
                                      }
                                    >
                                      <label
                                        className="MuiFormLabel-root-34 MuiFormLabel-filled-38 MuiInputLabel-root-23 MuiInputLabel-formControl-28 MuiInputLabel-animated-31 MuiInputLabel-shrink-30"
                                        data-shrink={true}
                                        htmlFor="Parts of speech"
                                      >
                                        Parts of speech
                                      </label>
                                    </FormLabel>
                                  </WithFormControlContext(FormLabel)>
                                </WithStyles(WithFormControlContext(FormLabel))>
                              </InputLabel>
                            </WithFormControlContext(InputLabel)>
                          </WithStyles(WithFormControlContext(InputLabel))>
                          <WithStyles(WithFormControlContext(Select))
                            onChange={[Function]}
                            value="noun"
                          >
                            <WithFormControlContext(Select)
                              classes={
                                Object {
                                  "disabled": "MuiSelect-disabled-76",
                                  "filled": "MuiSelect-filled-73",
                                  "icon": "MuiSelect-icon-77",
                                  "outlined": "MuiSelect-outlined-74",
                                  "root": "MuiSelect-root-71",
                                  "select": "MuiSelect-select-72",
                                  "selectMenu": "MuiSelect-selectMenu-75",
                                }
                              }
                              onChange={[Function]}
                              value="noun"
                            >
                              <Select
                                IconComponent={[Function]}
                                autoWidth={false}
                                classes={
                                  Object {
                                    "disabled": "MuiSelect-disabled-76",
                                    "filled": "MuiSelect-filled-73",
                                    "icon": "MuiSelect-icon-77",
                                    "outlined": "MuiSelect-outlined-74",
                                    "root": "MuiSelect-root-71",
                                    "select": "MuiSelect-select-72",
                                    "selectMenu": "MuiSelect-selectMenu-75",
                                  }
                                }
                                displayEmpty={false}
                                input={<WithStyles(Input) />}
                                muiFormControl={
                                  Object {
                                    "adornedStart": false,
                                    "disabled": false,
                                    "error": false,
                                    "filled": true,
                                    "focused": false,
                                    "margin": "none",
                                    "onBlur": [Function],
                                    "onEmpty": [Function],
                                    "onFilled": [Function],
                                    "onFocus": [Function],
                                    "required": false,
                                    "variant": "standard",
                                  }
                                }
                                multiple={false}
                                native={false}
                                onChange={[Function]}
                                value="noun"
                              >
                                <WithStyles(Input)
                                  inputComponent={[Function]}
                                  inputProps={
                                    Object {
                                      "IconComponent": [Function],
                                      "MenuProps": undefined,
                                      "SelectDisplayProps": undefined,
                                      "autoWidth": false,
                                      "children": Array [
                                        <WithStyles(MenuItem)
                                          value="noun"
                                        >
                                          Noun
                                        </WithStyles(MenuItem)>,
                                        <WithStyles(MenuItem)
                                          value="pronoun"
                                        >
                                          Pronoun
                                        </WithStyles(MenuItem)>,
                                        <WithStyles(MenuItem)
                                          value="verb"
                                        >
                                          Verb
                                        </WithStyles(MenuItem)>,
                                        <WithStyles(MenuItem)
                                          value="adjective"
                                        >
                                          Adjective
                                        </WithStyles(MenuItem)>,
                                        <WithStyles(MenuItem)
                                          value="adverb"
                                        >
                                          Adverb
                                        </WithStyles(MenuItem)>,
                                        <WithStyles(MenuItem)
                                          value="preposition"
                                        >
                                          Preposition
                                        </WithStyles(MenuItem)>,
                                        <WithStyles(MenuItem)
                                          value="conjunction"
                                        >
                                          Conjunction
                                        </WithStyles(MenuItem)>,
                                        <WithStyles(MenuItem)
                                          value="interjection"
                                        >
                                          Interjection
                                        </WithStyles(MenuItem)>,
                                        <WithStyles(MenuItem)
                                          value="article"
                                        >
                                          Article
                                        </WithStyles(MenuItem)>,
                                        <WithStyles(MenuItem)
                                          value="determiner"
                                        >
                                          Determiner
                                        </WithStyles(MenuItem)>,
                                      ],
                                      "classes": Object {
                                        "disabled": "MuiSelect-disabled-76",
                                        "filled": "MuiSelect-filled-73",
                                        "icon": "MuiSelect-icon-77",
                                        "outlined": "MuiSelect-outlined-74",
                                        "root": "MuiSelect-root-71",
                                        "select": "MuiSelect-select-72",
                                        "selectMenu": "MuiSelect-selectMenu-75",
                                      },
                                      "displayEmpty": false,
                                      "multiple": false,
                                      "onClose": undefined,
                                      "onOpen": undefined,
                                      "open": undefined,
                                      "renderValue": undefined,
                                      "type": undefined,
                                      "variant": "standard",
                                    }
                                  }
                                  onChange={[Function]}
                                  value="noun"
                                >
                                  <Input
                                    classes={
                                      Object {
                                        "disabled": "MuiInput-disabled-44",
                                        "error": "MuiInput-error-46",
                                        "focused": "MuiInput-focused-43",
                                        "formControl": "MuiInput-formControl-42",
                                        "fullWidth": "MuiInput-fullWidth-48",
                                        "input": "MuiInput-input-49",
                                        "inputMarginDense": "MuiInput-inputMarginDense-50",
                                        "inputMultiline": "MuiInput-inputMultiline-51",
                                        "inputType": "MuiInput-inputType-52",
                                        "inputTypeSearch": "MuiInput-inputTypeSearch-53",
                                        "multiline": "MuiInput-multiline-47",
                                        "root": "MuiInput-root-41",
                                        "underline": "MuiInput-underline-45",
                                      }
                                    }
                                    inputComponent={[Function]}
                                    inputProps={
                                      Object {
                                        "IconComponent": [Function],
                                        "MenuProps": undefined,
                                        "SelectDisplayProps": undefined,
                                        "autoWidth": false,
                                        "children": Array [
                                          <WithStyles(MenuItem)
                                            value="noun"
                                          >
                                            Noun
                                          </WithStyles(MenuItem)>,
                                          <WithStyles(MenuItem)
                                            value="pronoun"
                                          >
                                            Pronoun
                                          </WithStyles(MenuItem)>,
                                          <WithStyles(MenuItem)
                                            value="verb"
                                          >
                                            Verb
                                          </WithStyles(MenuItem)>,
                                          <WithStyles(MenuItem)
                                            value="adjective"
                                          >
                                            Adjective
                                          </WithStyles(MenuItem)>,
                                          <WithStyles(MenuItem)
                                            value="adverb"
                                          >
                                            Adverb
                                          </WithStyles(MenuItem)>,
                                          <WithStyles(MenuItem)
                                            value="preposition"
                                          >
                                            Preposition
                                          </WithStyles(MenuItem)>,
                                          <WithStyles(MenuItem)
                                            value="conjunction"
                                          >
                                            Conjunction
                                          </WithStyles(MenuItem)>,
                                          <WithStyles(MenuItem)
                                            value="interjection"
                                          >
                                            Interjection
                                          </WithStyles(MenuItem)>,
                                          <WithStyles(MenuItem)
                                            value="article"
                                          >
                                            Article
                                          </WithStyles(MenuItem)>,
                                          <WithStyles(MenuItem)
                                            value="determiner"
                                          >
                                            Determiner
                                          </WithStyles(MenuItem)>,
                                        ],
                                        "classes": Object {
                                          "disabled": "MuiSelect-disabled-76",
                                          "filled": "MuiSelect-filled-73",
                                          "icon": "MuiSelect-icon-77",
                                          "outlined": "MuiSelect-outlined-74",
                                          "root": "MuiSelect-root-71",
                                          "select": "MuiSelect-select-72",
                                          "selectMenu": "MuiSelect-selectMenu-75",
                                        },
                                        "displayEmpty": false,
                                        "multiple": false,
                                        "onClose": undefined,
                                        "onOpen": undefined,
                                        "open": undefined,
                                        "renderValue": undefined,
                                        "type": undefined,
                                        "variant": "standard",
                                      }
                                    }
                                    onChange={[Function]}
                                    value="noun"
                                  >
                                    <WithStyles(WithFormControlContext(InputBase))
                                      classes={
                                        Object {
                                          "disabled": "MuiInput-disabled-44",
                                          "error": "MuiInput-error-46",
                                          "focused": "MuiInput-focused-43",
                                          "formControl": "MuiInput-formControl-42",
                                          "fullWidth": "MuiInput-fullWidth-48",
                                          "input": "MuiInput-input-49",
                                          "inputMarginDense": "MuiInput-inputMarginDense-50",
                                          "inputMultiline": "MuiInput-inputMultiline-51",
                                          "inputType": "MuiInput-inputType-52",
                                          "inputTypeSearch": "MuiInput-inputTypeSearch-53",
                                          "multiline": "MuiInput-multiline-47",
                                          "root": "MuiInput-root-41 MuiInput-underline-45",
                                          "underline": null,
                                        }
                                      }
                                      fullWidth={false}
                                      inputComponent={[Function]}
                                      inputProps={
                                        Object {
                                          "IconComponent": [Function],
                                          "MenuProps": undefined,
                                          "SelectDisplayProps": undefined,
                                          "autoWidth": false,
                                          "children": Array [
                                            <WithStyles(MenuItem)
                                              value="noun"
                                            >
                                              Noun
                                            </WithStyles(MenuItem)>,
                                            <WithStyles(MenuItem)
                                              value="pronoun"
                                            >
                                              Pronoun
                                            </WithStyles(MenuItem)>,
                                            <WithStyles(MenuItem)
                                              value="verb"
                                            >
                                              Verb
                                            </WithStyles(MenuItem)>,
                                            <WithStyles(MenuItem)
                                              value="adjective"
                                            >
                                              Adjective
                                            </WithStyles(MenuItem)>,
                                            <WithStyles(MenuItem)
                                              value="adverb"
                                            >
                                              Adverb
                                            </WithStyles(MenuItem)>,
                                            <WithStyles(MenuItem)
                                              value="preposition"
                                            >
                                              Preposition
                                            </WithStyles(MenuItem)>,
                                            <WithStyles(MenuItem)
                                              value="conjunction"
                                            >
                                              Conjunction
                                            </WithStyles(MenuItem)>,
                                            <WithStyles(MenuItem)
                                              value="interjection"
                                            >
                                              Interjection
                                            </WithStyles(MenuItem)>,
                                            <WithStyles(MenuItem)
                                              value="article"
                                            >
                                              Article
                                            </WithStyles(MenuItem)>,
                                            <WithStyles(MenuItem)
                                              value="determiner"
                                            >
                                              Determiner
                                            </WithStyles(MenuItem)>,
                                          ],
                                          "classes": Object {
                                            "disabled": "MuiSelect-disabled-76",
                                            "filled": "MuiSelect-filled-73",
                                            "icon": "MuiSelect-icon-77",
                                            "outlined": "MuiSelect-outlined-74",
                                            "root": "MuiSelect-root-71",
                                            "select": "MuiSelect-select-72",
                                            "selectMenu": "MuiSelect-selectMenu-75",
                                          },
                                          "displayEmpty": false,
                                          "multiple": false,
                                          "onClose": undefined,
                                          "onOpen": undefined,
                                          "open": undefined,
                                          "renderValue": undefined,
                                          "type": undefined,
                                          "variant": "standard",
                                        }
                                      }
                                      multiline={false}
                                      onChange={[Function]}
                                      type="text"
                                      value="noun"
                                    >
                                      <WithFormControlContext(InputBase)
                                        classes={
                                          Object {
                                            "adornedEnd": "MuiInputBase-adornedEnd-59",
                                            "adornedStart": "MuiInputBase-adornedStart-58",
                                            "disabled": "MuiInputBase-disabled-57 MuiInput-disabled-44",
                                            "error": "MuiInputBase-error-60 MuiInput-error-46",
                                            "focused": "MuiInputBase-focused-56 MuiInput-focused-43",
                                            "formControl": "MuiInputBase-formControl-55 MuiInput-formControl-42",
                                            "fullWidth": "MuiInputBase-fullWidth-63 MuiInput-fullWidth-48",
                                            "input": "MuiInputBase-input-64 MuiInput-input-49",
                                            "inputAdornedEnd": "MuiInputBase-inputAdornedEnd-70",
                                            "inputAdornedStart": "MuiInputBase-inputAdornedStart-69",
                                            "inputMarginDense": "MuiInputBase-inputMarginDense-65 MuiInput-inputMarginDense-50",
                                            "inputMultiline": "MuiInputBase-inputMultiline-66 MuiInput-inputMultiline-51",
                                            "inputType": "MuiInputBase-inputType-67 MuiInput-inputType-52",
                                            "inputTypeSearch": "MuiInputBase-inputTypeSearch-68 MuiInput-inputTypeSearch-53",
                                            "marginDense": "MuiInputBase-marginDense-61",
                                            "multiline": "MuiInputBase-multiline-62 MuiInput-multiline-47",
                                            "root": "MuiInputBase-root-54 MuiInput-root-41 MuiInput-underline-45",
                                          }
                                        }
                                        fullWidth={false}
                                        inputComponent={[Function]}
                                        inputProps={
                                          Object {
                                            "IconComponent": [Function],
                                            "MenuProps": undefined,
                                            "SelectDisplayProps": undefined,
                                            "autoWidth": false,
                                            "children": Array [
                                              <WithStyles(MenuItem)
                                                value="noun"
                                              >
                                                Noun
                                              </WithStyles(MenuItem)>,
                                              <WithStyles(MenuItem)
                                                value="pronoun"
                                              >
                                                Pronoun
                                              </WithStyles(MenuItem)>,
                                              <WithStyles(MenuItem)
                                                value="verb"
                                              >
                                                Verb
                                              </WithStyles(MenuItem)>,
                                              <WithStyles(MenuItem)
                                                value="adjective"
                                              >
                                                Adjective
                                              </WithStyles(MenuItem)>,
                                              <WithStyles(MenuItem)
                                                value="adverb"
                                              >
                                                Adverb
                                              </WithStyles(MenuItem)>,
                                              <WithStyles(MenuItem)
                                                value="preposition"
                                              >
                                                Preposition
                                              </WithStyles(MenuItem)>,
                                              <WithStyles(MenuItem)
                                                value="conjunction"
                                              >
                                                Conjunction
                                              </WithStyles(MenuItem)>,
                                              <WithStyles(MenuItem)
                                                value="interjection"
                                              >
                                                Interjection
                                              </WithStyles(MenuItem)>,
                                              <WithStyles(MenuItem)
                                                value="article"
                                              >
                                                Article
                                              </WithStyles(MenuItem)>,
                                              <WithStyles(MenuItem)
                                                value="determiner"
                                              >
                                                Determiner
                                              </WithStyles(MenuItem)>,
                                            ],
                                            "classes": Object {
                                              "disabled": "MuiSelect-disabled-76",
                                              "filled": "MuiSelect-filled-73",
                                              "icon": "MuiSelect-icon-77",
                                              "outlined": "MuiSelect-outlined-74",
                                              "root": "MuiSelect-root-71",
                                              "select": "MuiSelect-select-72",
                                              "selectMenu": "MuiSelect-selectMenu-75",
                                            },
                                            "displayEmpty": false,
                                            "multiple": false,
                                            "onClose": undefined,
                                            "onOpen": undefined,
                                            "open": undefined,
                                            "renderValue": undefined,
                                            "type": undefined,
                                            "variant": "standard",
                                          }
                                        }
                                        multiline={false}
                                        onChange={[Function]}
                                        type="text"
                                        value="noun"
                                      >
                                        <InputBase
                                          classes={
                                            Object {
                                              "adornedEnd": "MuiInputBase-adornedEnd-59",
                                              "adornedStart": "MuiInputBase-adornedStart-58",
                                              "disabled": "MuiInputBase-disabled-57 MuiInput-disabled-44",
                                              "error": "MuiInputBase-error-60 MuiInput-error-46",
                                              "focused": "MuiInputBase-focused-56 MuiInput-focused-43",
                                              "formControl": "MuiInputBase-formControl-55 MuiInput-formControl-42",
                                              "fullWidth": "MuiInputBase-fullWidth-63 MuiInput-fullWidth-48",
                                              "input": "MuiInputBase-input-64 MuiInput-input-49",
                                              "inputAdornedEnd": "MuiInputBase-inputAdornedEnd-70",
                                              "inputAdornedStart": "MuiInputBase-inputAdornedStart-69",
                                              "inputMarginDense": "MuiInputBase-inputMarginDense-65 MuiInput-inputMarginDense-50",
                                              "inputMultiline": "MuiInputBase-inputMultiline-66 MuiInput-inputMultiline-51",
                                              "inputType": "MuiInputBase-inputType-67 MuiInput-inputType-52",
                                              "inputTypeSearch": "MuiInputBase-inputTypeSearch-68 MuiInput-inputTypeSearch-53",
                                              "marginDense": "MuiInputBase-marginDense-61",
                                              "multiline": "MuiInputBase-multiline-62 MuiInput-multiline-47",
                                              "root": "MuiInputBase-root-54 MuiInput-root-41 MuiInput-underline-45",
                                            }
                                          }
                                          fullWidth={false}
                                          inputComponent={[Function]}
                                          inputProps={
                                            Object {
                                              "IconComponent": [Function],
                                              "MenuProps": undefined,
                                              "SelectDisplayProps": undefined,
                                              "autoWidth": false,
                                              "children": Array [
                                                <WithStyles(MenuItem)
                                                  value="noun"
                                                >
                                                  Noun
                                                </WithStyles(MenuItem)>,
                                                <WithStyles(MenuItem)
                                                  value="pronoun"
                                                >
                                                  Pronoun
                                                </WithStyles(MenuItem)>,
                                                <WithStyles(MenuItem)
                                                  value="verb"
                                                >
                                                  Verb
                                                </WithStyles(MenuItem)>,
                                                <WithStyles(MenuItem)
                                                  value="adjective"
                                                >
                                                  Adjective
                                                </WithStyles(MenuItem)>,
                                                <WithStyles(MenuItem)
                                                  value="adverb"
                                                >
                                                  Adverb
                                                </WithStyles(MenuItem)>,
                                                <WithStyles(MenuItem)
                                                  value="preposition"
                                                >
                                                  Preposition
                                                </WithStyles(MenuItem)>,
                                                <WithStyles(MenuItem)
                                                  value="conjunction"
                                                >
                                                  Conjunction
                                                </WithStyles(MenuItem)>,
                                                <WithStyles(MenuItem)
                                                  value="interjection"
                                                >
                                                  Interjection
                                                </WithStyles(MenuItem)>,
                                                <WithStyles(MenuItem)
                                                  value="article"
                                                >
                                                  Article
                                                </WithStyles(MenuItem)>,
                                                <WithStyles(MenuItem)
                                                  value="determiner"
                                                >
                                                  Determiner
                                                </WithStyles(MenuItem)>,
                                              ],
                                              "classes": Object {
                                                "disabled": "MuiSelect-disabled-76",
                                                "filled": "MuiSelect-filled-73",
                                                "icon": "MuiSelect-icon-77",
                                                "outlined": "MuiSelect-outlined-74",
                                                "root": "MuiSelect-root-71",
                                                "select": "MuiSelect-select-72",
                                                "selectMenu": "MuiSelect-selectMenu-75",
                                              },
                                              "displayEmpty": false,
                                              "multiple": false,
                                              "onClose": undefined,
                                              "onOpen": undefined,
                                              "open": undefined,
                                              "renderValue": undefined,
                                              "type": undefined,
                                              "variant": "standard",
                                            }
                                          }
                                          muiFormControl={
                                            Object {
                                              "adornedStart": false,
                                              "disabled": false,
                                              "error": false,
                                              "filled": true,
                                              "focused": false,
                                              "margin": "none",
                                              "onBlur": [Function],
                                              "onEmpty": [Function],
                                              "onFilled": [Function],
                                              "onFocus": [Function],
                                              "required": false,
                                              "variant": "standard",
                                            }
                                          }
                                          multiline={false}
                                          onChange={[Function]}
                                          type="text"
                                          value="noun"
                                        >
                                          <div
                                            className="MuiInputBase-root-54 MuiInput-root-41 MuiInput-underline-45 MuiInputBase-formControl-55 MuiInput-formControl-42"
                                            onClick={[Function]}
                                          >
                                            <SelectInput
                                              IconComponent={[Function]}
                                              aria-invalid={false}
                                              autoWidth={false}
                                              className="MuiInputBase-input-64 MuiInput-input-49"
                                              classes={
                                                Object {
                                                  "disabled": "MuiSelect-disabled-76",
                                                  "filled": "MuiSelect-filled-73",
                                                  "icon": "MuiSelect-icon-77",
                                                  "outlined": "MuiSelect-outlined-74",
                                                  "root": "MuiSelect-root-71",
                                                  "select": "MuiSelect-select-72",
                                                  "selectMenu": "MuiSelect-selectMenu-75",
                                                }
                                              }
                                              disabled={false}
                                              displayEmpty={false}
                                              inputRef={[Function]}
                                              multiple={false}
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onFocus={[Function]}
                                              required={false}
                                              value="noun"
                                              variant="standard"
                                            >
                                              <div
                                                className="MuiSelect-root-71"
                                              >
                                                <div
                                                  aria-haspopup="true"
                                                  aria-pressed="false"
                                                  className="MuiSelect-select-72 MuiSelect-selectMenu-75 MuiInputBase-input-64 MuiInput-input-49"
                                                  onBlur={[Function]}
                                                  onClick={[Function]}
                                                  onFocus={[Function]}
                                                  onKeyDown={[Function]}
                                                  role="button"
                                                  tabIndex={0}
                                                >
                                                  Noun
                                                </div>
                                                <input
                                                  type="hidden"
                                                  value="noun"
                                                />
                                                <pure(ArrowDropDown)
                                                  className="MuiSelect-icon-77"
                                                >
                                                  <ArrowDropDown
                                                    className="MuiSelect-icon-77"
                                                  >
                                                    <WithStyles(SvgIcon)
                                                      className="MuiSelect-icon-77"
                                                    >
                                                      <SvgIcon
                                                        className="MuiSelect-icon-77"
                                                        classes={
                                                          Object {
                                                            "colorAction": "MuiSvgIcon-colorAction-81",
                                                            "colorDisabled": "MuiSvgIcon-colorDisabled-83",
                                                            "colorError": "MuiSvgIcon-colorError-82",
                                                            "colorPrimary": "MuiSvgIcon-colorPrimary-79",
                                                            "colorSecondary": "MuiSvgIcon-colorSecondary-80",
                                                            "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-84",
                                                            "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-86",
                                                            "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-85",
                                                            "root": "MuiSvgIcon-root-78",
                                                          }
                                                        }
                                                        color="inherit"
                                                        component="svg"
                                                        fontSize="default"
                                                        viewBox="0 0 24 24"
                                                      >
                                                        <svg
                                                          aria-hidden="true"
                                                          className="MuiSvgIcon-root-78 MuiSelect-icon-77"
                                                          focusable="false"
                                                          role="presentation"
                                                          viewBox="0 0 24 24"
                                                        >
                                                          <path
                                                            d="M7 10l5 5 5-5z"
                                                          />
                                                        </svg>
                                                      </SvgIcon>
                                                    </WithStyles(SvgIcon)>
                                                  </ArrowDropDown>
                                                </pure(ArrowDropDown)>
                                                <WithStyles(Menu)
                                                  MenuListProps={
                                                    Object {
                                                      "disableListWrap": true,
                                                      "role": "listbox",
                                                    }
                                                  }
                                                  PaperProps={
                                                    Object {
                                                      "style": Object {
                                                        "minWidth": null,
                                                      },
                                                    }
                                                  }
                                                  id="menu-"
                                                  onClose={[Function]}
                                                  open={false}
                                                >
                                                  <Menu
                                                    MenuListProps={
                                                      Object {
                                                        "disableListWrap": true,
                                                        "role": "listbox",
                                                      }
                                                    }
                                                    PaperProps={
                                                      Object {
                                                        "style": Object {
                                                          "minWidth": null,
                                                        },
                                                      }
                                                    }
                                                    classes={
                                                      Object {
                                                        "paper": "MuiMenu-paper-87",
                                                      }
                                                    }
                                                    disableAutoFocusItem={false}
                                                    id="menu-"
                                                    onClose={[Function]}
                                                    open={false}
                                                    theme={
                                                      Object {
                                                        "breakpoints": Object {
                                                          "between": [Function],
                                                          "down": [Function],
                                                          "keys": Array [
                                                            "xs",
                                                            "sm",
                                                            "md",
                                                            "lg",
                                                            "xl",
                                                          ],
                                                          "only": [Function],
                                                          "up": [Function],
                                                          "values": Object {
                                                            "lg": 1280,
                                                            "md": 960,
                                                            "sm": 600,
                                                            "xl": 1920,
                                                            "xs": 0,
                                                          },
                                                          "width": [Function],
                                                        },
                                                        "direction": "ltr",
                                                        "mixins": Object {
                                                          "gutters": [Function],
                                                          "toolbar": Object {
                                                            "@media (min-width:0px) and (orientation: landscape)": Object {
                                                              "minHeight": 48,
                                                            },
                                                            "@media (min-width:600px)": Object {
                                                              "minHeight": 64,
                                                            },
                                                            "minHeight": 56,
                                                          },
                                                        },
                                                        "overrides": Object {},
                                                        "palette": Object {
                                                          "action": Object {
                                                            "active": "rgba(0, 0, 0, 0.54)",
                                                            "disabled": "rgba(0, 0, 0, 0.26)",
                                                            "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                                            "hover": "rgba(0, 0, 0, 0.08)",
                                                            "hoverOpacity": 0.08,
                                                            "selected": "rgba(0, 0, 0, 0.14)",
                                                          },
                                                          "augmentColor": [Function],
                                                          "background": Object {
                                                            "default": "#fafafa",
                                                            "paper": "#fff",
                                                          },
                                                          "common": Object {
                                                            "black": "#000",
                                                            "white": "#fff",
                                                          },
                                                          "contrastThreshold": 3,
                                                          "divider": "rgba(0, 0, 0, 0.12)",
                                                          "error": Object {
                                                            "contrastText": "#fff",
                                                            "dark": "#d32f2f",
                                                            "light": "#e57373",
                                                            "main": "#f44336",
                                                          },
                                                          "getContrastText": [Function],
                                                          "grey": Object {
                                                            "100": "#f5f5f5",
                                                            "200": "#eeeeee",
                                                            "300": "#e0e0e0",
                                                            "400": "#bdbdbd",
                                                            "50": "#fafafa",
                                                            "500": "#9e9e9e",
                                                            "600": "#757575",
                                                            "700": "#616161",
                                                            "800": "#424242",
                                                            "900": "#212121",
                                                            "A100": "#d5d5d5",
                                                            "A200": "#aaaaaa",
                                                            "A400": "#303030",
                                                            "A700": "#616161",
                                                          },
                                                          "primary": Object {
                                                            "contrastText": "#fff",
                                                            "dark": "#303f9f",
                                                            "light": "#7986cb",
                                                            "main": "#3f51b5",
                                                          },
                                                          "secondary": Object {
                                                            "contrastText": "#fff",
                                                            "dark": "#c51162",
                                                            "light": "#ff4081",
                                                            "main": "#f50057",
                                                          },
                                                          "text": Object {
                                                            "disabled": "rgba(0, 0, 0, 0.38)",
                                                            "hint": "rgba(0, 0, 0, 0.38)",
                                                            "primary": "rgba(0, 0, 0, 0.87)",
                                                            "secondary": "rgba(0, 0, 0, 0.54)",
                                                          },
                                                          "tonalOffset": 0.2,
                                                          "type": "light",
                                                        },
                                                        "props": Object {},
                                                        "shadows": Array [
                                                          "none",
                                                          "0px 1px 3px 0px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 2px 1px -1px rgba(0,0,0,0.12)",
                                                          "0px 1px 5px 0px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 3px 1px -2px rgba(0,0,0,0.12)",
                                                          "0px 1px 8px 0px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 3px 3px -2px rgba(0,0,0,0.12)",
                                                          "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                                                          "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                                                          "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                                                          "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                                                          "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                                                          "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                                                          "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                                                          "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                                                          "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                                                          "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                                                          "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                                                          "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                                                          "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                                                          "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                                                          "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                                                          "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                                                          "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                                                          "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                                                          "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                                                          "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                                                          "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                                                        ],
                                                        "shape": Object {
                                                          "borderRadius": 4,
                                                        },
                                                        "spacing": Object {
                                                          "unit": 8,
                                                        },
                                                        "transitions": Object {
                                                          "create": [Function],
                                                          "duration": Object {
                                                            "complex": 375,
                                                            "enteringScreen": 225,
                                                            "leavingScreen": 195,
                                                            "short": 250,
                                                            "shorter": 200,
                                                            "shortest": 150,
                                                            "standard": 300,
                                                          },
                                                          "easing": Object {
                                                            "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                                                            "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                                                            "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                                                            "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                                                          },
                                                          "getAutoHeightDuration": [Function],
                                                        },
                                                        "typography": Object {
                                                          "body1": Object {
                                                            "color": "rgba(0, 0, 0, 0.87)",
                                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                            "fontSize": "0.875rem",
                                                            "fontWeight": 400,
                                                            "lineHeight": "1.46429em",
                                                          },
                                                          "body1Next": Object {
                                                            "color": "rgba(0, 0, 0, 0.87)",
                                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                            "fontSize": "1rem",
                                                            "fontWeight": 400,
                                                            "letterSpacing": "0.00938em",
                                                            "lineHeight": 1.5,
                                                          },
                                                          "body2": Object {
                                                            "color": "rgba(0, 0, 0, 0.87)",
                                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                            "fontSize": "0.875rem",
                                                            "fontWeight": 500,
                                                            "lineHeight": "1.71429em",
                                                          },
                                                          "body2Next": Object {
                                                            "color": "rgba(0, 0, 0, 0.87)",
                                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                            "fontSize": "0.875rem",
                                                            "fontWeight": 400,
                                                            "letterSpacing": "0.01071em",
                                                            "lineHeight": 1.5,
                                                          },
                                                          "button": Object {
                                                            "color": "rgba(0, 0, 0, 0.87)",
                                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                            "fontSize": "0.875rem",
                                                            "fontWeight": 500,
                                                            "textTransform": "uppercase",
                                                          },
                                                          "buttonNext": Object {
                                                            "color": "rgba(0, 0, 0, 0.87)",
                                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                            "fontSize": "0.875rem",
                                                            "fontWeight": 500,
                                                            "letterSpacing": "0.02857em",
                                                            "lineHeight": 1.75,
                                                            "textTransform": "uppercase",
                                                          },
                                                          "caption": Object {
                                                            "color": "rgba(0, 0, 0, 0.54)",
                                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                            "fontSize": "0.75rem",
                                                            "fontWeight": 400,
                                                            "lineHeight": "1.375em",
                                                          },
                                                          "captionNext": Object {
                                                            "color": "rgba(0, 0, 0, 0.87)",
                                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                            "fontSize": "0.75rem",
                                                            "fontWeight": 400,
                                                            "letterSpacing": "0.03333em",
                                                            "lineHeight": 1.66,
                                                          },
                                                          "display1": Object {
                                                            "color": "rgba(0, 0, 0, 0.54)",
                                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                            "fontSize": "2.125rem",
                                                            "fontWeight": 400,
                                                            "lineHeight": "1.20588em",
                                                          },
                                                          "display2": Object {
                                                            "color": "rgba(0, 0, 0, 0.54)",
                                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                            "fontSize": "2.8125rem",
                                                            "fontWeight": 400,
                                                            "lineHeight": "1.13333em",
                                                            "marginLeft": "-.02em",
                                                          },
                                                          "display3": Object {
                                                            "color": "rgba(0, 0, 0, 0.54)",
                                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                            "fontSize": "3.5rem",
                                                            "fontWeight": 400,
                                                            "letterSpacing": "-.02em",
                                                            "lineHeight": "1.30357em",
                                                            "marginLeft": "-.02em",
                                                          },
                                                          "display4": Object {
                                                            "color": "rgba(0, 0, 0, 0.54)",
                                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                            "fontSize": "7rem",
                                                            "fontWeight": 300,
                                                            "letterSpacing": "-.04em",
                                                            "lineHeight": "1.14286em",
                                                            "marginLeft": "-.04em",
                                                          },
                                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                          "fontSize": 14,
                                                          "fontWeightLight": 300,
                                                          "fontWeightMedium": 500,
                                                          "fontWeightRegular": 400,
                                                          "h1": Object {
                                                            "color": "rgba(0, 0, 0, 0.87)",
                                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                            "fontSize": "6rem",
                                                            "fontWeight": 300,
                                                            "letterSpacing": "-0.01562em",
                                                            "lineHeight": 1,
                                                          },
                                                          "h2": Object {
                                                            "color": "rgba(0, 0, 0, 0.87)",
                                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                            "fontSize": "3.75rem",
                                                            "fontWeight": 300,
                                                            "letterSpacing": "-0.00833em",
                                                            "lineHeight": 1,
                                                          },
                                                          "h3": Object {
                                                            "color": "rgba(0, 0, 0, 0.87)",
                                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                            "fontSize": "3rem",
                                                            "fontWeight": 400,
                                                            "letterSpacing": "0em",
                                                            "lineHeight": 1.04,
                                                          },
                                                          "h4": Object {
                                                            "color": "rgba(0, 0, 0, 0.87)",
                                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                            "fontSize": "2.125rem",
                                                            "fontWeight": 400,
                                                            "letterSpacing": "0.00735em",
                                                            "lineHeight": 1.17,
                                                          },
                                                          "h5": Object {
                                                            "color": "rgba(0, 0, 0, 0.87)",
                                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                            "fontSize": "1.5rem",
                                                            "fontWeight": 400,
                                                            "letterSpacing": "0em",
                                                            "lineHeight": 1.33,
                                                          },
                                                          "h6": Object {
                                                            "color": "rgba(0, 0, 0, 0.87)",
                                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                            "fontSize": "1.25rem",
                                                            "fontWeight": 500,
                                                            "letterSpacing": "0.0075em",
                                                            "lineHeight": 1.6,
                                                          },
                                                          "headline": Object {
                                                            "color": "rgba(0, 0, 0, 0.87)",
                                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                            "fontSize": "1.5rem",
                                                            "fontWeight": 400,
                                                            "lineHeight": "1.35417em",
                                                          },
                                                          "overline": Object {
                                                            "color": "rgba(0, 0, 0, 0.87)",
                                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                            "fontSize": "0.75rem",
                                                            "fontWeight": 400,
                                                            "letterSpacing": "0.08333em",
                                                            "lineHeight": 2.66,
                                                            "textTransform": "uppercase",
                                                          },
                                                          "pxToRem": [Function],
                                                          "round": [Function],
                                                          "subheading": Object {
                                                            "color": "rgba(0, 0, 0, 0.87)",
                                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                            "fontSize": "1rem",
                                                            "fontWeight": 400,
                                                            "lineHeight": "1.5em",
                                                          },
                                                          "subtitle1": Object {
                                                            "color": "rgba(0, 0, 0, 0.87)",
                                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                            "fontSize": "1rem",
                                                            "fontWeight": 400,
                                                            "letterSpacing": "0.00938em",
                                                            "lineHeight": 1.75,
                                                          },
                                                          "subtitle2": Object {
                                                            "color": "rgba(0, 0, 0, 0.87)",
                                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                            "fontSize": "0.875rem",
                                                            "fontWeight": 500,
                                                            "letterSpacing": "0.00714em",
                                                            "lineHeight": 1.57,
                                                          },
                                                          "title": Object {
                                                            "color": "rgba(0, 0, 0, 0.87)",
                                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                            "fontSize": "1.3125rem",
                                                            "fontWeight": 500,
                                                            "lineHeight": "1.16667em",
                                                          },
                                                          "useNextVariants": false,
                                                        },
                                                        "zIndex": Object {
                                                          "appBar": 1100,
                                                          "drawer": 1200,
                                                          "mobileStepper": 1000,
                                                          "modal": 1300,
                                                          "snackbar": 1400,
                                                          "tooltip": 1500,
                                                        },
                                                      }
                                                    }
                                                    transitionDuration="auto"
                                                  >
                                                    <WithStyles(Popover)
                                                      PaperProps={
                                                        Object {
                                                          "classes": Object {
                                                            "root": "MuiMenu-paper-87",
                                                          },
                                                          "style": Object {
                                                            "minWidth": null,
                                                          },
                                                        }
                                                      }
                                                      anchorOrigin={
                                                        Object {
                                                          "horizontal": "left",
                                                          "vertical": "top",
                                                        }
                                                      }
                                                      getContentAnchorEl={[Function]}
                                                      id="menu-"
                                                      onClose={[Function]}
                                                      onEntering={[Function]}
                                                      open={false}
                                                      transformOrigin={
                                                        Object {
                                                          "horizontal": "left",
                                                          "vertical": "top",
                                                        }
                                                      }
                                                      transitionDuration="auto"
                                                    >
                                                      <Popover
                                                        PaperProps={
                                                          Object {
                                                            "classes": Object {
                                                              "root": "MuiMenu-paper-87",
                                                            },
                                                            "style": Object {
                                                              "minWidth": null,
                                                            },
                                                          }
                                                        }
                                                        TransitionComponent={[Function]}
                                                        anchorOrigin={
                                                          Object {
                                                            "horizontal": "left",
                                                            "vertical": "top",
                                                          }
                                                        }
                                                        anchorReference="anchorEl"
                                                        classes={
                                                          Object {
                                                            "paper": "MuiPopover-paper-88",
                                                          }
                                                        }
                                                        elevation={8}
                                                        getContentAnchorEl={[Function]}
                                                        id="menu-"
                                                        marginThreshold={16}
                                                        onClose={[Function]}
                                                        onEntering={[Function]}
                                                        open={false}
                                                        transformOrigin={
                                                          Object {
                                                            "horizontal": "left",
                                                            "vertical": "top",
                                                          }
                                                        }
                                                        transitionDuration="auto"
                                                      >
                                                        <WithStyles(Modal)
                                                          BackdropProps={
                                                            Object {
                                                              "invisible": true,
                                                            }
                                                          }
                                                          id="menu-"
                                                          onClose={[Function]}
                                                          open={false}
                                                        >
                                                          <Modal
                                                            BackdropComponent={[Function]}
                                                            BackdropProps={
                                                              Object {
                                                                "invisible": true,
                                                              }
                                                            }
                                                            classes={
                                                              Object {
                                                                "hidden": "MuiModal-hidden-90",
                                                                "root": "MuiModal-root-89",
                                                              }
                                                            }
                                                            closeAfterTransition={false}
                                                            disableAutoFocus={false}
                                                            disableBackdropClick={false}
                                                            disableEnforceFocus={false}
                                                            disableEscapeKeyDown={false}
                                                            disablePortal={false}
                                                            disableRestoreFocus={false}
                                                            hideBackdrop={false}
                                                            id="menu-"
                                                            keepMounted={false}
                                                            manager={
                                                              ModalManager {
                                                                "data": Array [],
                                                                "handleContainerOverflow": true,
                                                                "hideSiblingNodes": true,
                                                                "modals": Array [],
                                                              }
                                                            }
                                                            onClose={[Function]}
                                                            open={false}
                                                          />
                                                        </WithStyles(Modal)>
                                                      </Popover>
                                                    </WithStyles(Popover)>
                                                  </Menu>
                                                </WithStyles(Menu)>
                                              </div>
                                            </SelectInput>
                                          </div>
                                        </InputBase>
                                      </WithFormControlContext(InputBase)>
                                    </WithStyles(WithFormControlContext(InputBase))>
                                  </Input>
                                </WithStyles(Input)>
                              </Select>
                            </WithFormControlContext(Select)>
                          </WithStyles(WithFormControlContext(Select))>
                        </div>
                      </FormControl>
                    </WithStyles(FormControl)>
                  </SelectBlock>
                </SelectWithOptions>
              </WithTheme(SelectWithOptions)>
            </div>
          </div>
          <div>
            <WithTheme(ChipSet)
              items={Array []}
              onRemoveItem={[Function]}
            >
              <ChipSet
                classes={Object {}}
                disabled={false}
                items={Array []}
                onRemoveItem={[Function]}
              >
                <div />
              </ChipSet>
            </WithTheme(ChipSet)>
          </div>
        </div>
      </InputsBlock>
    </WithTheme(InputsBlock)>
    <WithTheme(InputsBlock)
      control={true}
      onAddItem={[Function]}
      title="Synonyms"
    >
      <InputsBlock
        classes={Object {}}
        control={true}
        onAddItem={[Function]}
        title="Synonyms"
      >
        <div>
          <div>
            <h3>
              Synonyms
            </h3>
            <div>
              <WithTheme(TextFieldCustomized)
                control={
                  <WithStyles(Button)
                    disabled={true}
                    mini={true}
                    onClick={[Function]}
                    title="Add new option"
                  >
                    <pure(AddIcon) />
                  </WithStyles(Button)>
                }
                onChange={[Function]}
                onKeyPress={[Function]}
                placeholder="Add new option"
                value=""
              >
                <TextFieldCustomized
                  classes={Object {}}
                  control={
                    <WithStyles(Button)
                      disabled={true}
                      mini={true}
                      onClick={[Function]}
                      title="Add new option"
                    >
                      <pure(AddIcon) />
                    </WithStyles(Button)>
                  }
                  onChange={[Function]}
                  onKeyPress={[Function]}
                  placeholder="Add new option"
                  value=""
                >
                  <div>
                    <TextField
                      InputLabelProps={
                        Object {
                          "className": undefined,
                        }
                      }
                      InputProps={
                        Object {
                          "classes": Object {
                            "underline": undefined,
                          },
                        }
                      }
                      classes={
                        Object {
                          "root": undefined,
                        }
                      }
                      onChange={[Function]}
                      onKeyPress={[Function]}
                      placeholder="Add new option"
                      required={false}
                      select={false}
                      value=""
                      variant="standard"
                    >
                      <WithStyles(FormControl)
                        classes={
                          Object {
                            "root": undefined,
                          }
                        }
                        onKeyPress={[Function]}
                        required={false}
                        variant="standard"
                      >
                        <FormControl
                          classes={
                            Object {
                              "fullWidth": "MuiFormControl-fullWidth-22",
                              "marginDense": "MuiFormControl-marginDense-21",
                              "marginNormal": "MuiFormControl-marginNormal-20",
                              "root": "MuiFormControl-root-19",
                            }
                          }
                          component="div"
                          disabled={false}
                          error={false}
                          fullWidth={false}
                          margin="none"
                          onKeyPress={[Function]}
                          required={false}
                          variant="standard"
                        >
                          <div
                            className="MuiFormControl-root-19"
                            onKeyPress={[Function]}
                          >
                            <WithStyles(Input)
                              classes={
                                Object {
                                  "underline": undefined,
                                }
                              }
                              onChange={[Function]}
                              placeholder="Add new option"
                              value=""
                            >
                              <Input
                                classes={
                                  Object {
                                    "disabled": "MuiInput-disabled-44",
                                    "error": "MuiInput-error-46",
                                    "focused": "MuiInput-focused-43",
                                    "formControl": "MuiInput-formControl-42",
                                    "fullWidth": "MuiInput-fullWidth-48",
                                    "input": "MuiInput-input-49",
                                    "inputMarginDense": "MuiInput-inputMarginDense-50",
                                    "inputMultiline": "MuiInput-inputMultiline-51",
                                    "inputType": "MuiInput-inputType-52",
                                    "inputTypeSearch": "MuiInput-inputTypeSearch-53",
                                    "multiline": "MuiInput-multiline-47",
                                    "root": "MuiInput-root-41",
                                    "underline": "MuiInput-underline-45",
                                  }
                                }
                                onChange={[Function]}
                                placeholder="Add new option"
                                value=""
                              >
                                <WithStyles(WithFormControlContext(InputBase))
                                  classes={
                                    Object {
                                      "disabled": "MuiInput-disabled-44",
                                      "error": "MuiInput-error-46",
                                      "focused": "MuiInput-focused-43",
                                      "formControl": "MuiInput-formControl-42",
                                      "fullWidth": "MuiInput-fullWidth-48",
                                      "input": "MuiInput-input-49",
                                      "inputMarginDense": "MuiInput-inputMarginDense-50",
                                      "inputMultiline": "MuiInput-inputMultiline-51",
                                      "inputType": "MuiInput-inputType-52",
                                      "inputTypeSearch": "MuiInput-inputTypeSearch-53",
                                      "multiline": "MuiInput-multiline-47",
                                      "root": "MuiInput-root-41 MuiInput-underline-45",
                                      "underline": null,
                                    }
                                  }
                                  fullWidth={false}
                                  inputComponent="input"
                                  multiline={false}
                                  onChange={[Function]}
                                  placeholder="Add new option"
                                  type="text"
                                  value=""
                                >
                                  <WithFormControlContext(InputBase)
                                    classes={
                                      Object {
                                        "adornedEnd": "MuiInputBase-adornedEnd-59",
                                        "adornedStart": "MuiInputBase-adornedStart-58",
                                        "disabled": "MuiInputBase-disabled-57 MuiInput-disabled-44",
                                        "error": "MuiInputBase-error-60 MuiInput-error-46",
                                        "focused": "MuiInputBase-focused-56 MuiInput-focused-43",
                                        "formControl": "MuiInputBase-formControl-55 MuiInput-formControl-42",
                                        "fullWidth": "MuiInputBase-fullWidth-63 MuiInput-fullWidth-48",
                                        "input": "MuiInputBase-input-64 MuiInput-input-49",
                                        "inputAdornedEnd": "MuiInputBase-inputAdornedEnd-70",
                                        "inputAdornedStart": "MuiInputBase-inputAdornedStart-69",
                                        "inputMarginDense": "MuiInputBase-inputMarginDense-65 MuiInput-inputMarginDense-50",
                                        "inputMultiline": "MuiInputBase-inputMultiline-66 MuiInput-inputMultiline-51",
                                        "inputType": "MuiInputBase-inputType-67 MuiInput-inputType-52",
                                        "inputTypeSearch": "MuiInputBase-inputTypeSearch-68 MuiInput-inputTypeSearch-53",
                                        "marginDense": "MuiInputBase-marginDense-61",
                                        "multiline": "MuiInputBase-multiline-62 MuiInput-multiline-47",
                                        "root": "MuiInputBase-root-54 MuiInput-root-41 MuiInput-underline-45",
                                      }
                                    }
                                    fullWidth={false}
                                    inputComponent="input"
                                    multiline={false}
                                    onChange={[Function]}
                                    placeholder="Add new option"
                                    type="text"
                                    value=""
                                  >
                                    <InputBase
                                      classes={
                                        Object {
                                          "adornedEnd": "MuiInputBase-adornedEnd-59",
                                          "adornedStart": "MuiInputBase-adornedStart-58",
                                          "disabled": "MuiInputBase-disabled-57 MuiInput-disabled-44",
                                          "error": "MuiInputBase-error-60 MuiInput-error-46",
                                          "focused": "MuiInputBase-focused-56 MuiInput-focused-43",
                                          "formControl": "MuiInputBase-formControl-55 MuiInput-formControl-42",
                                          "fullWidth": "MuiInputBase-fullWidth-63 MuiInput-fullWidth-48",
                                          "input": "MuiInputBase-input-64 MuiInput-input-49",
                                          "inputAdornedEnd": "MuiInputBase-inputAdornedEnd-70",
                                          "inputAdornedStart": "MuiInputBase-inputAdornedStart-69",
                                          "inputMarginDense": "MuiInputBase-inputMarginDense-65 MuiInput-inputMarginDense-50",
                                          "inputMultiline": "MuiInputBase-inputMultiline-66 MuiInput-inputMultiline-51",
                                          "inputType": "MuiInputBase-inputType-67 MuiInput-inputType-52",
                                          "inputTypeSearch": "MuiInputBase-inputTypeSearch-68 MuiInput-inputTypeSearch-53",
                                          "marginDense": "MuiInputBase-marginDense-61",
                                          "multiline": "MuiInputBase-multiline-62 MuiInput-multiline-47",
                                          "root": "MuiInputBase-root-54 MuiInput-root-41 MuiInput-underline-45",
                                        }
                                      }
                                      fullWidth={false}
                                      inputComponent="input"
                                      muiFormControl={
                                        Object {
                                          "adornedStart": false,
                                          "disabled": false,
                                          "error": false,
                                          "filled": false,
                                          "focused": false,
                                          "margin": "none",
                                          "onBlur": [Function],
                                          "onEmpty": [Function],
                                          "onFilled": [Function],
                                          "onFocus": [Function],
                                          "required": false,
                                          "variant": "standard",
                                        }
                                      }
                                      multiline={false}
                                      onChange={[Function]}
                                      placeholder="Add new option"
                                      type="text"
                                      value=""
                                    >
                                      <div
                                        className="MuiInputBase-root-54 MuiInput-root-41 MuiInput-underline-45 MuiInputBase-formControl-55 MuiInput-formControl-42"
                                        onClick={[Function]}
                                      >
                                        <input
                                          aria-invalid={false}
                                          className="MuiInputBase-input-64 MuiInput-input-49"
                                          disabled={false}
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onFocus={[Function]}
                                          placeholder="Add new option"
                                          required={false}
                                          type="text"
                                          value=""
                                        />
                                      </div>
                                    </InputBase>
                                  </WithFormControlContext(InputBase)>
                                </WithStyles(WithFormControlContext(InputBase))>
                              </Input>
                            </WithStyles(Input)>
                          </div>
                        </FormControl>
                      </WithStyles(FormControl)>
                    </TextField>
                    <WithStyles(Button)
                      disabled={true}
                      mini={true}
                      onClick={[Function]}
                      title="Add new option"
                    >
                      <Button
                        classes={
                          Object {
                            "colorInherit": "MuiButton-colorInherit-112",
                            "contained": "MuiButton-contained-102",
                            "containedPrimary": "MuiButton-containedPrimary-103",
                            "containedSecondary": "MuiButton-containedSecondary-104",
                            "disabled": "MuiButton-disabled-111",
                            "extendedFab": "MuiButton-extendedFab-109",
                            "fab": "MuiButton-fab-108",
                            "flat": "MuiButton-flat-96",
                            "flatPrimary": "MuiButton-flatPrimary-97",
                            "flatSecondary": "MuiButton-flatSecondary-98",
                            "focusVisible": "MuiButton-focusVisible-110",
                            "fullWidth": "MuiButton-fullWidth-116",
                            "label": "MuiButton-label-92",
                            "mini": "MuiButton-mini-113",
                            "outlined": "MuiButton-outlined-99",
                            "outlinedPrimary": "MuiButton-outlinedPrimary-100",
                            "outlinedSecondary": "MuiButton-outlinedSecondary-101",
                            "raised": "MuiButton-raised-105",
                            "raisedPrimary": "MuiButton-raisedPrimary-106",
                            "raisedSecondary": "MuiButton-raisedSecondary-107",
                            "root": "MuiButton-root-91",
                            "sizeLarge": "MuiButton-sizeLarge-115",
                            "sizeSmall": "MuiButton-sizeSmall-114",
                            "text": "MuiButton-text-93",
                            "textPrimary": "MuiButton-textPrimary-94",
                            "textSecondary": "MuiButton-textSecondary-95",
                          }
                        }
                        color="default"
                        component="button"
                        disableFocusRipple={false}
                        disabled={true}
                        fullWidth={false}
                        mini={true}
                        onClick={[Function]}
                        size="medium"
                        title="Add new option"
                        type="button"
                        variant="text"
                      >
                        <WithStyles(ButtonBase)
                          className="MuiButton-root-91 MuiButton-text-93 MuiButton-flat-96 MuiButton-disabled-111"
                          component="button"
                          disabled={true}
                          focusRipple={true}
                          focusVisibleClassName="MuiButton-focusVisible-110"
                          onClick={[Function]}
                          title="Add new option"
                          type="button"
                        >
                          <ButtonBase
                            centerRipple={false}
                            className="MuiButton-root-91 MuiButton-text-93 MuiButton-flat-96 MuiButton-disabled-111"
                            classes={
                              Object {
                                "disabled": "MuiButtonBase-disabled-118",
                                "focusVisible": "MuiButtonBase-focusVisible-119",
                                "root": "MuiButtonBase-root-117",
                              }
                            }
                            component="button"
                            disableRipple={false}
                            disableTouchRipple={false}
                            disabled={true}
                            focusRipple={true}
                            focusVisibleClassName="MuiButton-focusVisible-110"
                            onClick={[Function]}
                            tabIndex="0"
                            title="Add new option"
                            type="button"
                          >
                            <button
                              className="MuiButtonBase-root-117 MuiButtonBase-disabled-118 MuiButton-root-91 MuiButton-text-93 MuiButton-flat-96 MuiButton-disabled-111"
                              disabled={true}
                              onBlur={[Function]}
                              onClick={[Function]}
                              onContextMenu={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                              onTouchEnd={[Function]}
                              onTouchMove={[Function]}
                              onTouchStart={[Function]}
                              tabIndex="-1"
                              title="Add new option"
                              type="button"
                            >
                              <span
                                className="MuiButton-label-92"
                              >
                                <pure(AddIcon)>
                                  <AddIcon>
                                    <WithStyles(SvgIcon)>
                                      <SvgIcon
                                        classes={
                                          Object {
                                            "colorAction": "MuiSvgIcon-colorAction-81",
                                            "colorDisabled": "MuiSvgIcon-colorDisabled-83",
                                            "colorError": "MuiSvgIcon-colorError-82",
                                            "colorPrimary": "MuiSvgIcon-colorPrimary-79",
                                            "colorSecondary": "MuiSvgIcon-colorSecondary-80",
                                            "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-84",
                                            "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-86",
                                            "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-85",
                                            "root": "MuiSvgIcon-root-78",
                                          }
                                        }
                                        color="inherit"
                                        component="svg"
                                        fontSize="default"
                                        viewBox="0 0 24 24"
                                      >
                                        <svg
                                          aria-hidden="true"
                                          className="MuiSvgIcon-root-78"
                                          focusable="false"
                                          role="presentation"
                                          viewBox="0 0 24 24"
                                        >
                                          <path
                                            d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"
                                          />
                                          <path
                                            d="M0 0h24v24H0z"
                                            fill="none"
                                          />
                                        </svg>
                                      </SvgIcon>
                                    </WithStyles(SvgIcon)>
                                  </AddIcon>
                                </pure(AddIcon)>
                              </span>
                            </button>
                          </ButtonBase>
                        </WithStyles(ButtonBase)>
                      </Button>
                    </WithStyles(Button)>
                  </div>
                </TextFieldCustomized>
              </WithTheme(TextFieldCustomized)>
            </div>
          </div>
          <div>
            <WithTheme(ChipSet)
              items={Array []}
              onRemoveItem={[Function]}
            >
              <ChipSet
                classes={Object {}}
                disabled={false}
                items={Array []}
                onRemoveItem={[Function]}
              >
                <div />
              </ChipSet>
            </WithTheme(ChipSet)>
          </div>
        </div>
      </InputsBlock>
    </WithTheme(InputsBlock)>
    <WithTheme(InputsBlock)
      control={true}
      onAddItem={[Function]}
      title="Examples"
    >
      <InputsBlock
        classes={Object {}}
        control={true}
        onAddItem={[Function]}
        title="Examples"
      >
        <div>
          <div>
            <h3>
              Examples
            </h3>
            <div>
              <WithTheme(TextFieldCustomized)
                control={
                  <WithStyles(Button)
                    disabled={true}
                    mini={true}
                    onClick={[Function]}
                    title="Add new option"
                  >
                    <pure(AddIcon) />
                  </WithStyles(Button)>
                }
                onChange={[Function]}
                onKeyPress={[Function]}
                placeholder="Add new option"
                value=""
              >
                <TextFieldCustomized
                  classes={Object {}}
                  control={
                    <WithStyles(Button)
                      disabled={true}
                      mini={true}
                      onClick={[Function]}
                      title="Add new option"
                    >
                      <pure(AddIcon) />
                    </WithStyles(Button)>
                  }
                  onChange={[Function]}
                  onKeyPress={[Function]}
                  placeholder="Add new option"
                  value=""
                >
                  <div>
                    <TextField
                      InputLabelProps={
                        Object {
                          "className": undefined,
                        }
                      }
                      InputProps={
                        Object {
                          "classes": Object {
                            "underline": undefined,
                          },
                        }
                      }
                      classes={
                        Object {
                          "root": undefined,
                        }
                      }
                      onChange={[Function]}
                      onKeyPress={[Function]}
                      placeholder="Add new option"
                      required={false}
                      select={false}
                      value=""
                      variant="standard"
                    >
                      <WithStyles(FormControl)
                        classes={
                          Object {
                            "root": undefined,
                          }
                        }
                        onKeyPress={[Function]}
                        required={false}
                        variant="standard"
                      >
                        <FormControl
                          classes={
                            Object {
                              "fullWidth": "MuiFormControl-fullWidth-22",
                              "marginDense": "MuiFormControl-marginDense-21",
                              "marginNormal": "MuiFormControl-marginNormal-20",
                              "root": "MuiFormControl-root-19",
                            }
                          }
                          component="div"
                          disabled={false}
                          error={false}
                          fullWidth={false}
                          margin="none"
                          onKeyPress={[Function]}
                          required={false}
                          variant="standard"
                        >
                          <div
                            className="MuiFormControl-root-19"
                            onKeyPress={[Function]}
                          >
                            <WithStyles(Input)
                              classes={
                                Object {
                                  "underline": undefined,
                                }
                              }
                              onChange={[Function]}
                              placeholder="Add new option"
                              value=""
                            >
                              <Input
                                classes={
                                  Object {
                                    "disabled": "MuiInput-disabled-44",
                                    "error": "MuiInput-error-46",
                                    "focused": "MuiInput-focused-43",
                                    "formControl": "MuiInput-formControl-42",
                                    "fullWidth": "MuiInput-fullWidth-48",
                                    "input": "MuiInput-input-49",
                                    "inputMarginDense": "MuiInput-inputMarginDense-50",
                                    "inputMultiline": "MuiInput-inputMultiline-51",
                                    "inputType": "MuiInput-inputType-52",
                                    "inputTypeSearch": "MuiInput-inputTypeSearch-53",
                                    "multiline": "MuiInput-multiline-47",
                                    "root": "MuiInput-root-41",
                                    "underline": "MuiInput-underline-45",
                                  }
                                }
                                onChange={[Function]}
                                placeholder="Add new option"
                                value=""
                              >
                                <WithStyles(WithFormControlContext(InputBase))
                                  classes={
                                    Object {
                                      "disabled": "MuiInput-disabled-44",
                                      "error": "MuiInput-error-46",
                                      "focused": "MuiInput-focused-43",
                                      "formControl": "MuiInput-formControl-42",
                                      "fullWidth": "MuiInput-fullWidth-48",
                                      "input": "MuiInput-input-49",
                                      "inputMarginDense": "MuiInput-inputMarginDense-50",
                                      "inputMultiline": "MuiInput-inputMultiline-51",
                                      "inputType": "MuiInput-inputType-52",
                                      "inputTypeSearch": "MuiInput-inputTypeSearch-53",
                                      "multiline": "MuiInput-multiline-47",
                                      "root": "MuiInput-root-41 MuiInput-underline-45",
                                      "underline": null,
                                    }
                                  }
                                  fullWidth={false}
                                  inputComponent="input"
                                  multiline={false}
                                  onChange={[Function]}
                                  placeholder="Add new option"
                                  type="text"
                                  value=""
                                >
                                  <WithFormControlContext(InputBase)
                                    classes={
                                      Object {
                                        "adornedEnd": "MuiInputBase-adornedEnd-59",
                                        "adornedStart": "MuiInputBase-adornedStart-58",
                                        "disabled": "MuiInputBase-disabled-57 MuiInput-disabled-44",
                                        "error": "MuiInputBase-error-60 MuiInput-error-46",
                                        "focused": "MuiInputBase-focused-56 MuiInput-focused-43",
                                        "formControl": "MuiInputBase-formControl-55 MuiInput-formControl-42",
                                        "fullWidth": "MuiInputBase-fullWidth-63 MuiInput-fullWidth-48",
                                        "input": "MuiInputBase-input-64 MuiInput-input-49",
                                        "inputAdornedEnd": "MuiInputBase-inputAdornedEnd-70",
                                        "inputAdornedStart": "MuiInputBase-inputAdornedStart-69",
                                        "inputMarginDense": "MuiInputBase-inputMarginDense-65 MuiInput-inputMarginDense-50",
                                        "inputMultiline": "MuiInputBase-inputMultiline-66 MuiInput-inputMultiline-51",
                                        "inputType": "MuiInputBase-inputType-67 MuiInput-inputType-52",
                                        "inputTypeSearch": "MuiInputBase-inputTypeSearch-68 MuiInput-inputTypeSearch-53",
                                        "marginDense": "MuiInputBase-marginDense-61",
                                        "multiline": "MuiInputBase-multiline-62 MuiInput-multiline-47",
                                        "root": "MuiInputBase-root-54 MuiInput-root-41 MuiInput-underline-45",
                                      }
                                    }
                                    fullWidth={false}
                                    inputComponent="input"
                                    multiline={false}
                                    onChange={[Function]}
                                    placeholder="Add new option"
                                    type="text"
                                    value=""
                                  >
                                    <InputBase
                                      classes={
                                        Object {
                                          "adornedEnd": "MuiInputBase-adornedEnd-59",
                                          "adornedStart": "MuiInputBase-adornedStart-58",
                                          "disabled": "MuiInputBase-disabled-57 MuiInput-disabled-44",
                                          "error": "MuiInputBase-error-60 MuiInput-error-46",
                                          "focused": "MuiInputBase-focused-56 MuiInput-focused-43",
                                          "formControl": "MuiInputBase-formControl-55 MuiInput-formControl-42",
                                          "fullWidth": "MuiInputBase-fullWidth-63 MuiInput-fullWidth-48",
                                          "input": "MuiInputBase-input-64 MuiInput-input-49",
                                          "inputAdornedEnd": "MuiInputBase-inputAdornedEnd-70",
                                          "inputAdornedStart": "MuiInputBase-inputAdornedStart-69",
                                          "inputMarginDense": "MuiInputBase-inputMarginDense-65 MuiInput-inputMarginDense-50",
                                          "inputMultiline": "MuiInputBase-inputMultiline-66 MuiInput-inputMultiline-51",
                                          "inputType": "MuiInputBase-inputType-67 MuiInput-inputType-52",
                                          "inputTypeSearch": "MuiInputBase-inputTypeSearch-68 MuiInput-inputTypeSearch-53",
                                          "marginDense": "MuiInputBase-marginDense-61",
                                          "multiline": "MuiInputBase-multiline-62 MuiInput-multiline-47",
                                          "root": "MuiInputBase-root-54 MuiInput-root-41 MuiInput-underline-45",
                                        }
                                      }
                                      fullWidth={false}
                                      inputComponent="input"
                                      muiFormControl={
                                        Object {
                                          "adornedStart": false,
                                          "disabled": false,
                                          "error": false,
                                          "filled": false,
                                          "focused": false,
                                          "margin": "none",
                                          "onBlur": [Function],
                                          "onEmpty": [Function],
                                          "onFilled": [Function],
                                          "onFocus": [Function],
                                          "required": false,
                                          "variant": "standard",
                                        }
                                      }
                                      multiline={false}
                                      onChange={[Function]}
                                      placeholder="Add new option"
                                      type="text"
                                      value=""
                                    >
                                      <div
                                        className="MuiInputBase-root-54 MuiInput-root-41 MuiInput-underline-45 MuiInputBase-formControl-55 MuiInput-formControl-42"
                                        onClick={[Function]}
                                      >
                                        <input
                                          aria-invalid={false}
                                          className="MuiInputBase-input-64 MuiInput-input-49"
                                          disabled={false}
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onFocus={[Function]}
                                          placeholder="Add new option"
                                          required={false}
                                          type="text"
                                          value=""
                                        />
                                      </div>
                                    </InputBase>
                                  </WithFormControlContext(InputBase)>
                                </WithStyles(WithFormControlContext(InputBase))>
                              </Input>
                            </WithStyles(Input)>
                          </div>
                        </FormControl>
                      </WithStyles(FormControl)>
                    </TextField>
                    <WithStyles(Button)
                      disabled={true}
                      mini={true}
                      onClick={[Function]}
                      title="Add new option"
                    >
                      <Button
                        classes={
                          Object {
                            "colorInherit": "MuiButton-colorInherit-112",
                            "contained": "MuiButton-contained-102",
                            "containedPrimary": "MuiButton-containedPrimary-103",
                            "containedSecondary": "MuiButton-containedSecondary-104",
                            "disabled": "MuiButton-disabled-111",
                            "extendedFab": "MuiButton-extendedFab-109",
                            "fab": "MuiButton-fab-108",
                            "flat": "MuiButton-flat-96",
                            "flatPrimary": "MuiButton-flatPrimary-97",
                            "flatSecondary": "MuiButton-flatSecondary-98",
                            "focusVisible": "MuiButton-focusVisible-110",
                            "fullWidth": "MuiButton-fullWidth-116",
                            "label": "MuiButton-label-92",
                            "mini": "MuiButton-mini-113",
                            "outlined": "MuiButton-outlined-99",
                            "outlinedPrimary": "MuiButton-outlinedPrimary-100",
                            "outlinedSecondary": "MuiButton-outlinedSecondary-101",
                            "raised": "MuiButton-raised-105",
                            "raisedPrimary": "MuiButton-raisedPrimary-106",
                            "raisedSecondary": "MuiButton-raisedSecondary-107",
                            "root": "MuiButton-root-91",
                            "sizeLarge": "MuiButton-sizeLarge-115",
                            "sizeSmall": "MuiButton-sizeSmall-114",
                            "text": "MuiButton-text-93",
                            "textPrimary": "MuiButton-textPrimary-94",
                            "textSecondary": "MuiButton-textSecondary-95",
                          }
                        }
                        color="default"
                        component="button"
                        disableFocusRipple={false}
                        disabled={true}
                        fullWidth={false}
                        mini={true}
                        onClick={[Function]}
                        size="medium"
                        title="Add new option"
                        type="button"
                        variant="text"
                      >
                        <WithStyles(ButtonBase)
                          className="MuiButton-root-91 MuiButton-text-93 MuiButton-flat-96 MuiButton-disabled-111"
                          component="button"
                          disabled={true}
                          focusRipple={true}
                          focusVisibleClassName="MuiButton-focusVisible-110"
                          onClick={[Function]}
                          title="Add new option"
                          type="button"
                        >
                          <ButtonBase
                            centerRipple={false}
                            className="MuiButton-root-91 MuiButton-text-93 MuiButton-flat-96 MuiButton-disabled-111"
                            classes={
                              Object {
                                "disabled": "MuiButtonBase-disabled-118",
                                "focusVisible": "MuiButtonBase-focusVisible-119",
                                "root": "MuiButtonBase-root-117",
                              }
                            }
                            component="button"
                            disableRipple={false}
                            disableTouchRipple={false}
                            disabled={true}
                            focusRipple={true}
                            focusVisibleClassName="MuiButton-focusVisible-110"
                            onClick={[Function]}
                            tabIndex="0"
                            title="Add new option"
                            type="button"
                          >
                            <button
                              className="MuiButtonBase-root-117 MuiButtonBase-disabled-118 MuiButton-root-91 MuiButton-text-93 MuiButton-flat-96 MuiButton-disabled-111"
                              disabled={true}
                              onBlur={[Function]}
                              onClick={[Function]}
                              onContextMenu={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                              onTouchEnd={[Function]}
                              onTouchMove={[Function]}
                              onTouchStart={[Function]}
                              tabIndex="-1"
                              title="Add new option"
                              type="button"
                            >
                              <span
                                className="MuiButton-label-92"
                              >
                                <pure(AddIcon)>
                                  <AddIcon>
                                    <WithStyles(SvgIcon)>
                                      <SvgIcon
                                        classes={
                                          Object {
                                            "colorAction": "MuiSvgIcon-colorAction-81",
                                            "colorDisabled": "MuiSvgIcon-colorDisabled-83",
                                            "colorError": "MuiSvgIcon-colorError-82",
                                            "colorPrimary": "MuiSvgIcon-colorPrimary-79",
                                            "colorSecondary": "MuiSvgIcon-colorSecondary-80",
                                            "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-84",
                                            "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-86",
                                            "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-85",
                                            "root": "MuiSvgIcon-root-78",
                                          }
                                        }
                                        color="inherit"
                                        component="svg"
                                        fontSize="default"
                                        viewBox="0 0 24 24"
                                      >
                                        <svg
                                          aria-hidden="true"
                                          className="MuiSvgIcon-root-78"
                                          focusable="false"
                                          role="presentation"
                                          viewBox="0 0 24 24"
                                        >
                                          <path
                                            d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"
                                          />
                                          <path
                                            d="M0 0h24v24H0z"
                                            fill="none"
                                          />
                                        </svg>
                                      </SvgIcon>
                                    </WithStyles(SvgIcon)>
                                  </AddIcon>
                                </pure(AddIcon)>
                              </span>
                            </button>
                          </ButtonBase>
                        </WithStyles(ButtonBase)>
                      </Button>
                    </WithStyles(Button)>
                  </div>
                </TextFieldCustomized>
              </WithTheme(TextFieldCustomized)>
            </div>
          </div>
          <div>
            <WithTheme(MultipleInputs)
              items={Array []}
              onChange={[Function]}
              onRemoveItem={[Function]}
              placeholder="Example"
            >
              <MultipleInputs
                classes={Object {}}
                disabled={false}
                items={Array []}
                onChange={[Function]}
                onRemoveItem={[Function]}
                placeholder="Example"
              >
                <div />
              </MultipleInputs>
            </WithTheme(MultipleInputs)>
          </div>
        </div>
      </InputsBlock>
    </WithTheme(InputsBlock)>
    <WithTheme(ControlsSeparator)
      align="right"
    >
      <ControlsSeparator
        align="right"
        classes={Object {}}
      >
        <div
          align="right"
        >
          <WithStyles(Button)
            color="primary"
            onClick={[Function]}
            title="Reset"
            variant="contained"
          >
            <Button
              classes={
                Object {
                  "colorInherit": "MuiButton-colorInherit-112",
                  "contained": "MuiButton-contained-102",
                  "containedPrimary": "MuiButton-containedPrimary-103",
                  "containedSecondary": "MuiButton-containedSecondary-104",
                  "disabled": "MuiButton-disabled-111",
                  "extendedFab": "MuiButton-extendedFab-109",
                  "fab": "MuiButton-fab-108",
                  "flat": "MuiButton-flat-96",
                  "flatPrimary": "MuiButton-flatPrimary-97",
                  "flatSecondary": "MuiButton-flatSecondary-98",
                  "focusVisible": "MuiButton-focusVisible-110",
                  "fullWidth": "MuiButton-fullWidth-116",
                  "label": "MuiButton-label-92",
                  "mini": "MuiButton-mini-113",
                  "outlined": "MuiButton-outlined-99",
                  "outlinedPrimary": "MuiButton-outlinedPrimary-100",
                  "outlinedSecondary": "MuiButton-outlinedSecondary-101",
                  "raised": "MuiButton-raised-105",
                  "raisedPrimary": "MuiButton-raisedPrimary-106",
                  "raisedSecondary": "MuiButton-raisedSecondary-107",
                  "root": "MuiButton-root-91",
                  "sizeLarge": "MuiButton-sizeLarge-115",
                  "sizeSmall": "MuiButton-sizeSmall-114",
                  "text": "MuiButton-text-93",
                  "textPrimary": "MuiButton-textPrimary-94",
                  "textSecondary": "MuiButton-textSecondary-95",
                }
              }
              color="primary"
              component="button"
              disableFocusRipple={false}
              disabled={false}
              fullWidth={false}
              mini={false}
              onClick={[Function]}
              size="medium"
              title="Reset"
              type="button"
              variant="contained"
            >
              <WithStyles(ButtonBase)
                className="MuiButton-root-91 MuiButton-contained-102 MuiButton-containedPrimary-103 MuiButton-raised-105 MuiButton-raisedPrimary-106"
                component="button"
                disabled={false}
                focusRipple={true}
                focusVisibleClassName="MuiButton-focusVisible-110"
                onClick={[Function]}
                title="Reset"
                type="button"
              >
                <ButtonBase
                  centerRipple={false}
                  className="MuiButton-root-91 MuiButton-contained-102 MuiButton-containedPrimary-103 MuiButton-raised-105 MuiButton-raisedPrimary-106"
                  classes={
                    Object {
                      "disabled": "MuiButtonBase-disabled-118",
                      "focusVisible": "MuiButtonBase-focusVisible-119",
                      "root": "MuiButtonBase-root-117",
                    }
                  }
                  component="button"
                  disableRipple={false}
                  disableTouchRipple={false}
                  disabled={false}
                  focusRipple={true}
                  focusVisibleClassName="MuiButton-focusVisible-110"
                  onClick={[Function]}
                  tabIndex="0"
                  title="Reset"
                  type="button"
                >
                  <button
                    className="MuiButtonBase-root-117 MuiButton-root-91 MuiButton-contained-102 MuiButton-containedPrimary-103 MuiButton-raised-105 MuiButton-raisedPrimary-106"
                    disabled={false}
                    onBlur={[Function]}
                    onClick={[Function]}
                    onContextMenu={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    tabIndex="0"
                    title="Reset"
                    type="button"
                  >
                    <span
                      className="MuiButton-label-92"
                    >
                      Reset changes
                    </span>
                    <NoSsr
                      defer={false}
                      fallback={null}
                    >
                      <WithStyles(TouchRipple)
                        center={false}
                        innerRef={[Function]}
                      >
                        <TouchRipple
                          center={false}
                          classes={
                            Object {
                              "child": "MuiTouchRipple-child-124",
                              "childLeaving": "MuiTouchRipple-childLeaving-125",
                              "childPulsate": "MuiTouchRipple-childPulsate-126",
                              "ripple": "MuiTouchRipple-ripple-121",
                              "ripplePulsate": "MuiTouchRipple-ripplePulsate-123",
                              "rippleVisible": "MuiTouchRipple-rippleVisible-122",
                              "root": "MuiTouchRipple-root-120",
                            }
                          }
                        >
                          <TransitionGroup
                            childFactory={[Function]}
                            className="MuiTouchRipple-root-120"
                            component="span"
                            enter={true}
                            exit={true}
                          >
                            <span
                              className="MuiTouchRipple-root-120"
                            />
                          </TransitionGroup>
                        </TouchRipple>
                      </WithStyles(TouchRipple)>
                    </NoSsr>
                  </button>
                </ButtonBase>
              </WithStyles(ButtonBase)>
            </Button>
          </WithStyles(Button)>
          <WithStyles(Button)
            color="primary"
            onClick={[Function]}
            title="Save"
            variant="contained"
          >
            <Button
              classes={
                Object {
                  "colorInherit": "MuiButton-colorInherit-112",
                  "contained": "MuiButton-contained-102",
                  "containedPrimary": "MuiButton-containedPrimary-103",
                  "containedSecondary": "MuiButton-containedSecondary-104",
                  "disabled": "MuiButton-disabled-111",
                  "extendedFab": "MuiButton-extendedFab-109",
                  "fab": "MuiButton-fab-108",
                  "flat": "MuiButton-flat-96",
                  "flatPrimary": "MuiButton-flatPrimary-97",
                  "flatSecondary": "MuiButton-flatSecondary-98",
                  "focusVisible": "MuiButton-focusVisible-110",
                  "fullWidth": "MuiButton-fullWidth-116",
                  "label": "MuiButton-label-92",
                  "mini": "MuiButton-mini-113",
                  "outlined": "MuiButton-outlined-99",
                  "outlinedPrimary": "MuiButton-outlinedPrimary-100",
                  "outlinedSecondary": "MuiButton-outlinedSecondary-101",
                  "raised": "MuiButton-raised-105",
                  "raisedPrimary": "MuiButton-raisedPrimary-106",
                  "raisedSecondary": "MuiButton-raisedSecondary-107",
                  "root": "MuiButton-root-91",
                  "sizeLarge": "MuiButton-sizeLarge-115",
                  "sizeSmall": "MuiButton-sizeSmall-114",
                  "text": "MuiButton-text-93",
                  "textPrimary": "MuiButton-textPrimary-94",
                  "textSecondary": "MuiButton-textSecondary-95",
                }
              }
              color="primary"
              component="button"
              disableFocusRipple={false}
              disabled={false}
              fullWidth={false}
              mini={false}
              onClick={[Function]}
              size="medium"
              title="Save"
              type="button"
              variant="contained"
            >
              <WithStyles(ButtonBase)
                className="MuiButton-root-91 MuiButton-contained-102 MuiButton-containedPrimary-103 MuiButton-raised-105 MuiButton-raisedPrimary-106"
                component="button"
                disabled={false}
                focusRipple={true}
                focusVisibleClassName="MuiButton-focusVisible-110"
                onClick={[Function]}
                title="Save"
                type="button"
              >
                <ButtonBase
                  centerRipple={false}
                  className="MuiButton-root-91 MuiButton-contained-102 MuiButton-containedPrimary-103 MuiButton-raised-105 MuiButton-raisedPrimary-106"
                  classes={
                    Object {
                      "disabled": "MuiButtonBase-disabled-118",
                      "focusVisible": "MuiButtonBase-focusVisible-119",
                      "root": "MuiButtonBase-root-117",
                    }
                  }
                  component="button"
                  disableRipple={false}
                  disableTouchRipple={false}
                  disabled={false}
                  focusRipple={true}
                  focusVisibleClassName="MuiButton-focusVisible-110"
                  onClick={[Function]}
                  tabIndex="0"
                  title="Save"
                  type="button"
                >
                  <button
                    className="MuiButtonBase-root-117 MuiButton-root-91 MuiButton-contained-102 MuiButton-containedPrimary-103 MuiButton-raised-105 MuiButton-raisedPrimary-106"
                    disabled={false}
                    onBlur={[Function]}
                    onClick={[Function]}
                    onContextMenu={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    tabIndex="0"
                    title="Save"
                    type="button"
                  >
                    <span
                      className="MuiButton-label-92"
                    >
                      Save
                    </span>
                    <NoSsr
                      defer={false}
                      fallback={null}
                    >
                      <WithStyles(TouchRipple)
                        center={false}
                        innerRef={[Function]}
                      >
                        <TouchRipple
                          center={false}
                          classes={
                            Object {
                              "child": "MuiTouchRipple-child-124",
                              "childLeaving": "MuiTouchRipple-childLeaving-125",
                              "childPulsate": "MuiTouchRipple-childPulsate-126",
                              "ripple": "MuiTouchRipple-ripple-121",
                              "ripplePulsate": "MuiTouchRipple-ripplePulsate-123",
                              "rippleVisible": "MuiTouchRipple-rippleVisible-122",
                              "root": "MuiTouchRipple-root-120",
                            }
                          }
                        >
                          <TransitionGroup
                            childFactory={[Function]}
                            className="MuiTouchRipple-root-120"
                            component="span"
                            enter={true}
                            exit={true}
                          >
                            <span
                              className="MuiTouchRipple-root-120"
                            />
                          </TransitionGroup>
                        </TouchRipple>
                      </WithStyles(TouchRipple)>
                    </NoSsr>
                  </button>
                </ButtonBase>
              </WithStyles(ButtonBase)>
            </Button>
          </WithStyles(Button)>
        </div>
      </ControlsSeparator>
    </WithTheme(ControlsSeparator)>
  </form>
</WordForm>
`;
