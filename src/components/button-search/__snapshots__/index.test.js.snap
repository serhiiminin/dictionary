// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Button control isActive 1`] = `
<StyledComponent
  forwardedComponent={
    Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "sc-bdVaJa",
        "isStatic": true,
        "rules": Array [
          "
  && {
    background: linear-gradient(149.02deg, #86d1ff -11.95%, #bbd6fd 89.7%, #c5d7fd 89.71%, #c5d7fd 89.73%);
    box-shadow: 9px 9px 15px rgba(15, 99, 203, 0.179551);
    border-radius: 8px;
    padding: 15px 55px;
    color: #fff;
    &:hover {
      background: linear-gradient(149.02deg, #86d1ff -11.95%, #bbd6fd 89.7%, #c5d7fd 89.71%, #c5d7fd 89.73%);
    }
  }
",
        ],
      },
      "displayName": "Styled(Component)",
      "foldedComponentIds": Array [],
      "render": [Function],
      "styledComponentId": "sc-bdVaJa",
      "target": [Function],
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
      Symbol(Symbol.hasInstance): [Function],
    }
  }
  forwardedRef={null}
  isActive={true}
>
  Text
</StyledComponent>
`;

exports[`Button control render 1`] = `
<StyledComponent
  forwardedComponent={
    Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "sc-bdVaJa",
        "isStatic": true,
        "rules": Array [
          "
  && {
    background: linear-gradient(149.02deg, #86d1ff -11.95%, #bbd6fd 89.7%, #c5d7fd 89.71%, #c5d7fd 89.73%);
    box-shadow: 9px 9px 15px rgba(15, 99, 203, 0.179551);
    border-radius: 8px;
    padding: 15px 55px;
    color: #fff;
    &:hover {
      background: linear-gradient(149.02deg, #86d1ff -11.95%, #bbd6fd 89.7%, #c5d7fd 89.71%, #c5d7fd 89.73%);
    }
  }
",
        ],
      },
      "displayName": "Styled(Component)",
      "foldedComponentIds": Array [],
      "render": [Function],
      "styledComponentId": "sc-bdVaJa",
      "target": [Function],
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
      Symbol(Symbol.hasInstance): [Function],
    }
  }
  forwardedRef={null}
>
  Text
</StyledComponent>
`;
