// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Main page render 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <AddWord
    classes={Object {}}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <Jss(ControlsSeparator)
          align="left"
>
          <withRouter(ButtonWithRouter)
                    to="/words-list"
          >
                    List of my words
          </withRouter(ButtonWithRouter)>
          <withRouter(ButtonWithRouter)
                    to="/words-search"
          >
                    Search for a new word
          </withRouter(ButtonWithRouter)>
</Jss(ControlsSeparator)>,
        <main
          className={undefined}
>
          <Jss(Component) />
</main>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "align": "left",
          "children": Array [
            <withRouter(ButtonWithRouter)
              to="/words-list"
>
              List of my words
</withRouter(ButtonWithRouter)>,
            <withRouter(ButtonWithRouter)
              to="/words-search"
>
              Search for a new word
</withRouter(ButtonWithRouter)>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": "List of my words",
              "to": "/words-list",
            },
            "ref": null,
            "rendered": "List of my words",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": "Search for a new word",
              "to": "/words-search",
            },
            "ref": null,
            "rendered": "Search for a new word",
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <Jss(Component) />,
          "className": undefined,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "main",
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <Jss(ControlsSeparator)
            align="left"
>
            <withRouter(ButtonWithRouter)
                        to="/words-list"
            >
                        List of my words
            </withRouter(ButtonWithRouter)>
            <withRouter(ButtonWithRouter)
                        to="/words-search"
            >
                        Search for a new word
            </withRouter(ButtonWithRouter)>
</Jss(ControlsSeparator)>,
          <main
            className={undefined}
>
            <Jss(Component) />
</main>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "align": "left",
            "children": Array [
              <withRouter(ButtonWithRouter)
                to="/words-list"
>
                List of my words
</withRouter(ButtonWithRouter)>,
              <withRouter(ButtonWithRouter)
                to="/words-search"
>
                Search for a new word
</withRouter(ButtonWithRouter)>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": "List of my words",
                "to": "/words-list",
              },
              "ref": null,
              "rendered": "List of my words",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": "Search for a new word",
                "to": "/words-search",
              },
              "ref": null,
              "rendered": "Search for a new word",
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Jss(Component) />,
            "className": undefined,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "main",
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
