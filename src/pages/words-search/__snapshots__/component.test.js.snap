// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Main page render 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <SearchWord
    classes={Object {}}
    cleanFoundWord={[Function]}
    currentLoadingNames={Array []}
    foundWord={
        Object {
            "foundWord": Object {},
          }
    }
    onFillForm={[Function]}
    saveWord={[Function]}
    searchWord={[Function]}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <Jss(ControlsSeparator)
          align="left"
>
          <withRouter(ButtonWithRouter)
                    to="/words-list"
          >
                    List of my words
          </withRouter(ButtonWithRouter)>
</Jss(ControlsSeparator)>,
        <main
          className={undefined}
>
          <div>
                    <Jss(TextFieldLoading)
                              label="Search a word"
                              loading={false}
                              onChange={[Function]}
                              value=""
                    />
                    <Jss(ControlsSeparator)
                              align="left"
                    >
                              <WithStyles(ButtonCustomized)
                                        disabled={false}
                                        onClick={[Function]}
                              >
                                        Save to my words
                              </WithStyles(ButtonCustomized)>
                              <WithStyles(ButtonCustomized)
                                        disabled={false}
                                        onClick={[Function]}
                              >
                                        Edit before saving
                              </WithStyles(ButtonCustomized)>
                    </Jss(ControlsSeparator)>
                    <Jss(FoundWordDescription)
                              foundWord={
                                        Object {
                                                  "foundWord": Object {},
                                                }
                              }
                              pushTextToInput={[Function]}
                    />
          </div>
          <div>
                    <Jss(FoundWordExamples)
                              foundWord={
                                        Object {
                                                  "foundWord": Object {},
                                                }
                              }
                              pushTextToInput={[Function]}
                    />
          </div>
</main>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "align": "left",
          "children": <withRouter(ButtonWithRouter)
            to="/words-list"
>
            List of my words
</withRouter(ButtonWithRouter)>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": "List of my words",
            "to": "/words-list",
          },
          "ref": null,
          "rendered": "List of my words",
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div>
              <Jss(TextFieldLoading)
                            label="Search a word"
                            loading={false}
                            onChange={[Function]}
                            value=""
              />
              <Jss(ControlsSeparator)
                            align="left"
              >
                            <WithStyles(ButtonCustomized)
                                          disabled={false}
                                          onClick={[Function]}
                            >
                                          Save to my words
                            </WithStyles(ButtonCustomized)>
                            <WithStyles(ButtonCustomized)
                                          disabled={false}
                                          onClick={[Function]}
                            >
                                          Edit before saving
                            </WithStyles(ButtonCustomized)>
              </Jss(ControlsSeparator)>
              <Jss(FoundWordDescription)
                            foundWord={
                                          Object {
                                                        "foundWord": Object {},
                                                      }
                            }
                            pushTextToInput={[Function]}
              />
</div>,
            <div>
              <Jss(FoundWordExamples)
                            foundWord={
                                          Object {
                                                        "foundWord": Object {},
                                                      }
                            }
                            pushTextToInput={[Function]}
              />
</div>,
          ],
          "className": undefined,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <Jss(TextFieldLoading)
                  label="Search a word"
                  loading={false}
                  onChange={[Function]}
                  value=""
/>,
                <Jss(ControlsSeparator)
                  align="left"
>
                  <WithStyles(ButtonCustomized)
                                    disabled={false}
                                    onClick={[Function]}
                  >
                                    Save to my words
                  </WithStyles(ButtonCustomized)>
                  <WithStyles(ButtonCustomized)
                                    disabled={false}
                                    onClick={[Function]}
                  >
                                    Edit before saving
                  </WithStyles(ButtonCustomized)>
</Jss(ControlsSeparator)>,
                <Jss(FoundWordDescription)
                  foundWord={
                                    Object {
                                                      "foundWord": Object {},
                                                    }
                  }
                  pushTextToInput={[Function]}
/>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "label": "Search a word",
                  "loading": false,
                  "onChange": [Function],
                  "value": "",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "align": "left",
                  "children": Array [
                    <WithStyles(ButtonCustomized)
                      disabled={false}
                      onClick={[Function]}
>
                      Save to my words
</WithStyles(ButtonCustomized)>,
                    <WithStyles(ButtonCustomized)
                      disabled={false}
                      onClick={[Function]}
>
                      Edit before saving
</WithStyles(ButtonCustomized)>,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "Save to my words",
                      "disabled": false,
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": "Save to my words",
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "Edit before saving",
                      "disabled": false,
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": "Edit before saving",
                    "type": [Function],
                  },
                ],
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "foundWord": Object {
                    "foundWord": Object {},
                  },
                  "pushTextToInput": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <Jss(FoundWordExamples)
                foundWord={
                                Object {
                                                "foundWord": Object {},
                                              }
                }
                pushTextToInput={[Function]}
/>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "foundWord": Object {
                  "foundWord": Object {},
                },
                "pushTextToInput": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
        ],
        "type": "main",
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <Jss(ControlsSeparator)
            align="left"
>
            <withRouter(ButtonWithRouter)
                        to="/words-list"
            >
                        List of my words
            </withRouter(ButtonWithRouter)>
</Jss(ControlsSeparator)>,
          <main
            className={undefined}
>
            <div>
                        <Jss(TextFieldLoading)
                                    label="Search a word"
                                    loading={false}
                                    onChange={[Function]}
                                    value=""
                        />
                        <Jss(ControlsSeparator)
                                    align="left"
                        >
                                    <WithStyles(ButtonCustomized)
                                                disabled={false}
                                                onClick={[Function]}
                                    >
                                                Save to my words
                                    </WithStyles(ButtonCustomized)>
                                    <WithStyles(ButtonCustomized)
                                                disabled={false}
                                                onClick={[Function]}
                                    >
                                                Edit before saving
                                    </WithStyles(ButtonCustomized)>
                        </Jss(ControlsSeparator)>
                        <Jss(FoundWordDescription)
                                    foundWord={
                                                Object {
                                                            "foundWord": Object {},
                                                          }
                                    }
                                    pushTextToInput={[Function]}
                        />
            </div>
            <div>
                        <Jss(FoundWordExamples)
                                    foundWord={
                                                Object {
                                                            "foundWord": Object {},
                                                          }
                                    }
                                    pushTextToInput={[Function]}
                        />
            </div>
</main>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "align": "left",
            "children": <withRouter(ButtonWithRouter)
              to="/words-list"
>
              List of my words
</withRouter(ButtonWithRouter)>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": "List of my words",
              "to": "/words-list",
            },
            "ref": null,
            "rendered": "List of my words",
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div>
                <Jss(TextFieldLoading)
                                label="Search a word"
                                loading={false}
                                onChange={[Function]}
                                value=""
                />
                <Jss(ControlsSeparator)
                                align="left"
                >
                                <WithStyles(ButtonCustomized)
                                                disabled={false}
                                                onClick={[Function]}
                                >
                                                Save to my words
                                </WithStyles(ButtonCustomized)>
                                <WithStyles(ButtonCustomized)
                                                disabled={false}
                                                onClick={[Function]}
                                >
                                                Edit before saving
                                </WithStyles(ButtonCustomized)>
                </Jss(ControlsSeparator)>
                <Jss(FoundWordDescription)
                                foundWord={
                                                Object {
                                                                "foundWord": Object {},
                                                              }
                                }
                                pushTextToInput={[Function]}
                />
</div>,
              <div>
                <Jss(FoundWordExamples)
                                foundWord={
                                                Object {
                                                                "foundWord": Object {},
                                                              }
                                }
                                pushTextToInput={[Function]}
                />
</div>,
            ],
            "className": undefined,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <Jss(TextFieldLoading)
                    label="Search a word"
                    loading={false}
                    onChange={[Function]}
                    value=""
/>,
                  <Jss(ControlsSeparator)
                    align="left"
>
                    <WithStyles(ButtonCustomized)
                                        disabled={false}
                                        onClick={[Function]}
                    >
                                        Save to my words
                    </WithStyles(ButtonCustomized)>
                    <WithStyles(ButtonCustomized)
                                        disabled={false}
                                        onClick={[Function]}
                    >
                                        Edit before saving
                    </WithStyles(ButtonCustomized)>
</Jss(ControlsSeparator)>,
                  <Jss(FoundWordDescription)
                    foundWord={
                                        Object {
                                                            "foundWord": Object {},
                                                          }
                    }
                    pushTextToInput={[Function]}
/>,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "label": "Search a word",
                    "loading": false,
                    "onChange": [Function],
                    "value": "",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "align": "left",
                    "children": Array [
                      <WithStyles(ButtonCustomized)
                        disabled={false}
                        onClick={[Function]}
>
                        Save to my words
</WithStyles(ButtonCustomized)>,
                      <WithStyles(ButtonCustomized)
                        disabled={false}
                        onClick={[Function]}
>
                        Edit before saving
</WithStyles(ButtonCustomized)>,
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "children": "Save to my words",
                        "disabled": false,
                        "onClick": [Function],
                      },
                      "ref": null,
                      "rendered": "Save to my words",
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "children": "Edit before saving",
                        "disabled": false,
                        "onClick": [Function],
                      },
                      "ref": null,
                      "rendered": "Edit before saving",
                      "type": [Function],
                    },
                  ],
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "foundWord": Object {
                      "foundWord": Object {},
                    },
                    "pushTextToInput": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <Jss(FoundWordExamples)
                  foundWord={
                                    Object {
                                                      "foundWord": Object {},
                                                    }
                  }
                  pushTextToInput={[Function]}
/>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "foundWord": Object {
                    "foundWord": Object {},
                  },
                  "pushTextToInput": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
          ],
          "type": "main",
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
